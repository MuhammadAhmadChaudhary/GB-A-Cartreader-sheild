
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00001b3e  00001bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011c  00800202  00800202  00001bd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003cdd  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e0b  00000000  00000000  00005aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e17  00000000  00000000  000068b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  000086d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a11  00000000  00000000  00008acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002758  00000000  00000000  000094dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000bc35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e3       	ldi	r30, 0x3E	; 62
      fc:	fb e1       	ldi	r31, 0x1B	; 27
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 30       	cpi	r26, 0x02	; 2
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a2 e0       	ldi	r26, 0x02	; 2
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ae 31       	cpi	r26, 0x1E	; 30
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	07 d4       	rcall	.+2062   	; 0x92e <main>
     120:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <USART_Receive>:

void usart_Timer(int count) {
	for (int x = 0; x < count; x++) {
		receivedBuffer[x] = USART_Receive();
	}
     126:	e0 ec       	ldi	r30, 0xC0	; 192
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	88 23       	and	r24, r24
     12e:	ec f7       	brge	.-6      	; 0x12a <USART_Receive+0x4>
     130:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     134:	08 95       	ret

00000136 <USART_Transmit>:
     136:	e0 ec       	ldi	r30, 0xC0	; 192
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	90 81       	ld	r25, Z
     13c:	95 ff       	sbrs	r25, 5
     13e:	fd cf       	rjmp	.-6      	; 0x13a <USART_Transmit+0x4>
     140:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     144:	08 95       	ret

00000146 <usart_read_bytes>:
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	18 16       	cp	r1, r24
     150:	19 06       	cpc	r1, r25
     152:	54 f4       	brge	.+20     	; 0x168 <usart_read_bytes+0x22>
     154:	c2 e1       	ldi	r28, 0x12	; 18
     156:	d2 e0       	ldi	r29, 0x02	; 2
     158:	8c 01       	movw	r16, r24
     15a:	0e 5e       	subi	r16, 0xEE	; 238
     15c:	1d 4f       	sbci	r17, 0xFD	; 253
     15e:	e3 df       	rcall	.-58     	; 0x126 <USART_Receive>
     160:	89 93       	st	Y+, r24
     162:	c0 17       	cp	r28, r16
     164:	d1 07       	cpc	r29, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <usart_read_bytes+0x18>
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	08 95       	ret

00000172 <usart_init>:
     172:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     176:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     17a:	88 e1       	ldi	r24, 0x18	; 24
     17c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     180:	8e e0       	ldi	r24, 0x0E	; 14
     182:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     186:	08 95       	ret

00000188 <usart_read_chars>:
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	c2 e1       	ldi	r28, 0x12	; 18
     18e:	d2 e0       	ldi	r29, 0x02	; 2
     190:	ca df       	rcall	.-108    	; 0x126 <USART_Receive>
     192:	89 93       	st	Y+, r24
     194:	81 11       	cpse	r24, r1
     196:	fc cf       	rjmp	.-8      	; 0x190 <usart_read_chars+0x8>
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <rd_wr_csmreq_cs2_reset>:
     19e:	2e 9a       	sbi	0x05, 6	; 5
     1a0:	a5 9a       	sbi	0x14, 5	; 20
     1a2:	a1 9a       	sbi	0x14, 1	; 20
     1a4:	a0 9a       	sbi	0x14, 0	; 20
     1a6:	08 95       	ret

000001a8 <gb_mode>:
     1a8:	12 b8       	out	0x02, r1	; 2
     1aa:	11 b8       	out	0x01, r1	; 1
     1ac:	11 ba       	out	0x11, r1	; 17
     1ae:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     1b2:	8f ef       	ldi	r24, 0xFF	; 255
     1b4:	80 bb       	out	0x10, r24	; 16
     1b6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     1ba:	08 95       	ret

000001bc <set_16bit_address>:
     1bc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     1c0:	81 bb       	out	0x11, r24	; 17
     1c2:	08 95       	ret

000001c4 <read_8bit_data>:
     1c4:	fb df       	rcall	.-10     	; 0x1bc <set_16bit_address>
     1c6:	a5 98       	cbi	0x14, 5	; 20
     1c8:	a1 98       	cbi	0x14, 1	; 20
     1ca:	00 00       	nop
     1cc:	00 00       	nop
     1ce:	80 b1       	in	r24, 0x00	; 0
     1d0:	a1 9a       	sbi	0x14, 1	; 20
     1d2:	a5 9a       	sbi	0x14, 5	; 20
     1d4:	08 95       	ret

000001d6 <write_8bit_data>:
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	d6 2f       	mov	r29, r22
     1dc:	c4 2f       	mov	r28, r20
     1de:	ee df       	rcall	.-36     	; 0x1bc <set_16bit_address>
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	81 b9       	out	0x01, r24	; 1
     1e4:	d2 b9       	out	0x02, r29	; 2
     1e6:	a0 98       	cbi	0x14, 0	; 20
     1e8:	c1 30       	cpi	r28, 0x01	; 1
     1ea:	09 f4       	brne	.+2      	; 0x1ee <write_8bit_data+0x18>
     1ec:	a5 98       	cbi	0x14, 5	; 20
     1ee:	00 00       	nop
     1f0:	c1 30       	cpi	r28, 0x01	; 1
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <write_8bit_data+0x20>
     1f4:	a5 9a       	sbi	0x14, 5	; 20
     1f6:	a0 9a       	sbi	0x14, 0	; 20
     1f8:	12 b8       	out	0x02, r1	; 2
     1fa:	11 b8       	out	0x01, r1	; 1
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <gba_mode>:
     202:	11 ba       	out	0x11, r1	; 17
     204:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     208:	12 b8       	out	0x02, r1	; 2
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	80 bb       	out	0x10, r24	; 16
     20e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     212:	81 b9       	out	0x01, r24	; 1
     214:	08 95       	ret

00000216 <gba_set_24bit_address>:
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	12 b8       	out	0x02, r1	; 2
     21c:	e8 e0       	ldi	r30, 0x08	; 8
     21e:	f1 e0       	ldi	r31, 0x01	; 1
     220:	10 82       	st	Z, r1
     222:	11 ba       	out	0x11, r1	; 17
     224:	2f ef       	ldi	r18, 0xFF	; 255
     226:	21 b9       	out	0x01, r18	; 1
     228:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     22c:	20 bb       	out	0x10, r18	; 16
     22e:	8c 01       	movw	r16, r24
     230:	22 27       	eor	r18, r18
     232:	33 27       	eor	r19, r19
     234:	02 b9       	out	0x02, r16	; 2
     236:	07 2f       	mov	r16, r23
     238:	18 2f       	mov	r17, r24
     23a:	29 2f       	mov	r18, r25
     23c:	33 27       	eor	r19, r19
     23e:	00 83       	st	Z, r16
     240:	61 bb       	out	0x11, r22	; 17
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	08 95       	ret

00000248 <gba_read_16bit_data>:
     248:	e6 df       	rcall	.-52     	; 0x216 <gba_set_24bit_address>
     24a:	a5 98       	cbi	0x14, 5	; 20
     24c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     250:	11 ba       	out	0x11, r1	; 17
     252:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     256:	10 ba       	out	0x10, r1	; 16
     258:	a1 98       	cbi	0x14, 1	; 20
     25a:	00 00       	nop
     25c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     260:	8f b1       	in	r24, 0x0f	; 15
     262:	a1 9a       	sbi	0x14, 1	; 20
     264:	a5 9a       	sbi	0x14, 5	; 20
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	92 2b       	or	r25, r18
     26a:	08 95       	ret

0000026c <gba_read_ram_8bit_data>:
     26c:	a7 df       	rcall	.-178    	; 0x1bc <set_16bit_address>
     26e:	a1 98       	cbi	0x14, 1	; 20
     270:	2e 98       	cbi	0x05, 6	; 5
     272:	00 00       	nop
     274:	00 00       	nop
     276:	80 b1       	in	r24, 0x00	; 0
     278:	2e 9a       	sbi	0x05, 6	; 5
     27a:	a1 9a       	sbi	0x14, 1	; 20
     27c:	08 95       	ret

0000027e <gba_write_ram_8bit_data>:
     27e:	cf 93       	push	r28
     280:	c6 2f       	mov	r28, r22
     282:	9c df       	rcall	.-200    	; 0x1bc <set_16bit_address>
     284:	8f ef       	ldi	r24, 0xFF	; 255
     286:	81 b9       	out	0x01, r24	; 1
     288:	c2 b9       	out	0x02, r28	; 2
     28a:	a0 98       	cbi	0x14, 0	; 20
     28c:	2e 98       	cbi	0x05, 6	; 5
     28e:	00 00       	nop
     290:	00 00       	nop
     292:	2e 9a       	sbi	0x05, 6	; 5
     294:	a0 9a       	sbi	0x14, 0	; 20
     296:	12 b8       	out	0x02, r1	; 2
     298:	11 b8       	out	0x01, r1	; 1
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <gba_eeprom_mode>:
     29e:	8f ef       	ldi	r24, 0xFF	; 255
     2a0:	80 bb       	out	0x10, r24	; 16
     2a2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     2a6:	81 b9       	out	0x01, r24	; 1
     2a8:	90 e8       	ldi	r25, 0x80	; 128
     2aa:	91 bb       	out	0x11, r25	; 17
     2ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     2b0:	82 b9       	out	0x02, r24	; 2
     2b2:	08 95       	ret

000002b4 <gba_eeprom_set_address>:
     2b4:	a5 98       	cbi	0x14, 5	; 20
     2b6:	62 30       	cpi	r22, 0x02	; 2
     2b8:	51 f4       	brne	.+20     	; 0x2ce <gba_eeprom_set_address+0x1a>
     2ba:	41 11       	cpse	r20, r1
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <gba_eeprom_set_address+0x12>
     2be:	bc 01       	movw	r22, r24
     2c0:	70 6c       	ori	r23, 0xC0	; 192
     2c2:	9f e0       	ldi	r25, 0x0F	; 15
     2c4:	2e c0       	rjmp	.+92     	; 0x322 <gba_eeprom_set_address+0x6e>
     2c6:	bc 01       	movw	r22, r24
     2c8:	70 68       	ori	r23, 0x80	; 128
     2ca:	9f e0       	ldi	r25, 0x0F	; 15
     2cc:	2a c0       	rjmp	.+84     	; 0x322 <gba_eeprom_set_address+0x6e>
     2ce:	41 11       	cpse	r20, r1
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <gba_eeprom_set_address+0x26>
     2d2:	bc 01       	movw	r22, r24
     2d4:	60 6c       	ori	r22, 0xC0	; 192
     2d6:	97 e0       	ldi	r25, 0x07	; 7
     2d8:	24 c0       	rjmp	.+72     	; 0x322 <gba_eeprom_set_address+0x6e>
     2da:	bc 01       	movw	r22, r24
     2dc:	60 68       	ori	r22, 0x80	; 128
     2de:	97 e0       	ldi	r25, 0x07	; 7
     2e0:	20 c0       	rjmp	.+64     	; 0x322 <gba_eeprom_set_address+0x6e>
     2e2:	9f 01       	movw	r18, r30
     2e4:	09 2e       	mov	r0, r25
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <gba_eeprom_set_address+0x38>
     2e8:	22 0f       	add	r18, r18
     2ea:	33 1f       	adc	r19, r19
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <gba_eeprom_set_address+0x34>
     2f0:	26 23       	and	r18, r22
     2f2:	37 23       	and	r19, r23
     2f4:	23 2b       	or	r18, r19
     2f6:	11 f0       	breq	.+4      	; 0x2fc <gba_eeprom_set_address+0x48>
     2f8:	88 9a       	sbi	0x11, 0	; 17
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <gba_eeprom_set_address+0x4a>
     2fc:	88 98       	cbi	0x11, 0	; 17
     2fe:	a0 98       	cbi	0x14, 0	; 20
     300:	00 00       	nop
     302:	00 00       	nop
     304:	a0 9a       	sbi	0x14, 0	; 20
     306:	00 00       	nop
     308:	00 00       	nop
     30a:	91 50       	subi	r25, 0x01	; 1
     30c:	52 f7       	brpl	.-44     	; 0x2e2 <gba_eeprom_set_address+0x2e>
     30e:	41 11       	cpse	r20, r1
     310:	0b c0       	rjmp	.+22     	; 0x328 <gba_eeprom_set_address+0x74>
     312:	88 98       	cbi	0x11, 0	; 17
     314:	00 00       	nop
     316:	a0 98       	cbi	0x14, 0	; 20
     318:	00 00       	nop
     31a:	00 00       	nop
     31c:	a0 9a       	sbi	0x14, 0	; 20
     31e:	a5 9a       	sbi	0x14, 5	; 20
     320:	08 95       	ret
     322:	e1 e0       	ldi	r30, 0x01	; 1
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	dd cf       	rjmp	.-70     	; 0x2e2 <gba_eeprom_set_address+0x2e>
     328:	08 95       	ret

0000032a <gba_eeprom_read>:
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	c3 df       	rcall	.-122    	; 0x2b4 <gba_eeprom_set_address>
     32e:	88 98       	cbi	0x11, 0	; 17
     330:	80 98       	cbi	0x10, 0	; 16
     332:	a5 98       	cbi	0x14, 5	; 20
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	a1 98       	cbi	0x14, 1	; 20
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	a1 9a       	sbi	0x14, 1	; 20
     33e:	00 00       	nop
     340:	00 00       	nop
     342:	81 50       	subi	r24, 0x01	; 1
     344:	c1 f7       	brne	.-16     	; 0x336 <gba_eeprom_read+0xc>
     346:	e3 e1       	ldi	r30, 0x13	; 19
     348:	f3 e0       	ldi	r31, 0x03	; 3
     34a:	ab e1       	ldi	r26, 0x1B	; 27
     34c:	b3 e0       	ldi	r27, 0x03	; 3
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	14 c0       	rjmp	.+40     	; 0x37c <gba_eeprom_read+0x52>
     354:	a1 98       	cbi	0x14, 1	; 20
     356:	00 00       	nop
     358:	00 00       	nop
     35a:	a1 9a       	sbi	0x14, 1	; 20
     35c:	78 9b       	sbis	0x0f, 0	; 15
     35e:	08 c0       	rjmp	.+16     	; 0x370 <gba_eeprom_read+0x46>
     360:	ab 01       	movw	r20, r22
     362:	08 2e       	mov	r0, r24
     364:	02 c0       	rjmp	.+4      	; 0x36a <gba_eeprom_read+0x40>
     366:	44 0f       	add	r20, r20
     368:	55 1f       	adc	r21, r21
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <gba_eeprom_read+0x3c>
     36e:	24 2b       	or	r18, r20
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	80 f7       	brcc	.-32     	; 0x354 <gba_eeprom_read+0x2a>
     374:	21 93       	st	Z+, r18
     376:	ea 17       	cp	r30, r26
     378:	fb 07       	cpc	r31, r27
     37a:	21 f0       	breq	.+8      	; 0x384 <gba_eeprom_read+0x5a>
     37c:	87 e0       	ldi	r24, 0x07	; 7
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	e8 cf       	rjmp	.-48     	; 0x354 <gba_eeprom_read+0x2a>
     384:	a5 9a       	sbi	0x14, 5	; 20
     386:	88 9a       	sbi	0x11, 0	; 17
     388:	80 9a       	sbi	0x10, 0	; 16
     38a:	08 95       	ret

0000038c <gba_eeprom_write>:
     38c:	41 e0       	ldi	r20, 0x01	; 1
     38e:	92 df       	rcall	.-220    	; 0x2b4 <gba_eeprom_set_address>
     390:	e3 e1       	ldi	r30, 0x13	; 19
     392:	f3 e0       	ldi	r31, 0x03	; 3
     394:	4b e1       	ldi	r20, 0x1B	; 27
     396:	53 e0       	ldi	r21, 0x03	; 3
     398:	1a c0       	rjmp	.+52     	; 0x3ce <gba_eeprom_write+0x42>
     39a:	80 81       	ld	r24, Z
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	02 2e       	mov	r0, r18
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <gba_eeprom_write+0x1a>
     3a2:	95 95       	asr	r25
     3a4:	87 95       	ror	r24
     3a6:	0a 94       	dec	r0
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <gba_eeprom_write+0x16>
     3aa:	80 ff       	sbrs	r24, 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <gba_eeprom_write+0x26>
     3ae:	88 9a       	sbi	0x11, 0	; 17
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <gba_eeprom_write+0x28>
     3b2:	88 98       	cbi	0x11, 0	; 17
     3b4:	a0 98       	cbi	0x14, 0	; 20
     3b6:	00 00       	nop
     3b8:	00 00       	nop
     3ba:	a0 9a       	sbi	0x14, 0	; 20
     3bc:	00 00       	nop
     3be:	00 00       	nop
     3c0:	21 50       	subi	r18, 0x01	; 1
     3c2:	31 09       	sbc	r19, r1
     3c4:	50 f7       	brcc	.-44     	; 0x39a <gba_eeprom_write+0xe>
     3c6:	31 96       	adiw	r30, 0x01	; 1
     3c8:	e4 17       	cp	r30, r20
     3ca:	f5 07       	cpc	r31, r21
     3cc:	19 f0       	breq	.+6      	; 0x3d4 <gba_eeprom_write+0x48>
     3ce:	27 e0       	ldi	r18, 0x07	; 7
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	e3 cf       	rjmp	.-58     	; 0x39a <gba_eeprom_write+0xe>
     3d4:	88 98       	cbi	0x11, 0	; 17
     3d6:	a0 98       	cbi	0x14, 0	; 20
     3d8:	00 00       	nop
     3da:	00 00       	nop
     3dc:	a0 9a       	sbi	0x14, 0	; 20
     3de:	00 00       	nop
     3e0:	00 00       	nop
     3e2:	a5 9a       	sbi	0x14, 5	; 20
     3e4:	08 95       	ret

000003e6 <flash_write_bus_cycle>:
     3e6:	cf 93       	push	r28
     3e8:	c6 2f       	mov	r28, r22
     3ea:	2f ef       	ldi	r18, 0xFF	; 255
     3ec:	21 b9       	out	0x01, r18	; 1
     3ee:	e6 de       	rcall	.-564    	; 0x1bc <set_16bit_address>
     3f0:	c2 b9       	out	0x02, r28	; 2
     3f2:	a0 98       	cbi	0x14, 0	; 20
     3f4:	2e 98       	cbi	0x05, 6	; 5
     3f6:	00 00       	nop
     3f8:	a0 9a       	sbi	0x14, 0	; 20
     3fa:	2e 9a       	sbi	0x05, 6	; 5
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <flash_read_chip_id>:
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	6a ea       	ldi	r22, 0xAA	; 170
     406:	85 e5       	ldi	r24, 0x55	; 85
     408:	95 e5       	ldi	r25, 0x55	; 85
     40a:	ed df       	rcall	.-38     	; 0x3e6 <flash_write_bus_cycle>
     40c:	65 e5       	ldi	r22, 0x55	; 85
     40e:	8a ea       	ldi	r24, 0xAA	; 170
     410:	9a e2       	ldi	r25, 0x2A	; 42
     412:	e9 df       	rcall	.-46     	; 0x3e6 <flash_write_bus_cycle>
     414:	60 e9       	ldi	r22, 0x90	; 144
     416:	85 e5       	ldi	r24, 0x55	; 85
     418:	95 e5       	ldi	r25, 0x55	; 85
     41a:	e5 df       	rcall	.-54     	; 0x3e6 <flash_write_bus_cycle>
     41c:	2f ef       	ldi	r18, 0xFF	; 255
     41e:	89 ef       	ldi	r24, 0xF9	; 249
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	21 50       	subi	r18, 0x01	; 1
     424:	80 40       	sbci	r24, 0x00	; 0
     426:	90 40       	sbci	r25, 0x00	; 0
     428:	e1 f7       	brne	.-8      	; 0x422 <flash_read_chip_id+0x22>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <flash_read_chip_id+0x2c>
     42c:	00 00       	nop
     42e:	12 b8       	out	0x02, r1	; 2
     430:	11 b8       	out	0x01, r1	; 1
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	1a df       	rcall	.-460    	; 0x26c <gba_read_ram_8bit_data>
     438:	c0 e1       	ldi	r28, 0x10	; 16
     43a:	d2 e0       	ldi	r29, 0x02	; 2
     43c:	88 83       	st	Y, r24
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	14 df       	rcall	.-472    	; 0x26c <gba_read_ram_8bit_data>
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	6a ea       	ldi	r22, 0xAA	; 170
     448:	85 e5       	ldi	r24, 0x55	; 85
     44a:	95 e5       	ldi	r25, 0x55	; 85
     44c:	cc df       	rcall	.-104    	; 0x3e6 <flash_write_bus_cycle>
     44e:	65 e5       	ldi	r22, 0x55	; 85
     450:	8a ea       	ldi	r24, 0xAA	; 170
     452:	9a e2       	ldi	r25, 0x2A	; 42
     454:	c8 df       	rcall	.-112    	; 0x3e6 <flash_write_bus_cycle>
     456:	60 ef       	ldi	r22, 0xF0	; 240
     458:	85 e5       	ldi	r24, 0x55	; 85
     45a:	95 e5       	ldi	r25, 0x55	; 85
     45c:	c4 df       	rcall	.-120    	; 0x3e6 <flash_write_bus_cycle>
     45e:	2f ef       	ldi	r18, 0xFF	; 255
     460:	89 ef       	ldi	r24, 0xF9	; 249
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	21 50       	subi	r18, 0x01	; 1
     466:	80 40       	sbci	r24, 0x00	; 0
     468:	90 40       	sbci	r25, 0x00	; 0
     46a:	e1 f7       	brne	.-8      	; 0x464 <flash_read_chip_id+0x64>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <flash_read_chip_id+0x6e>
     46e:	00 00       	nop
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <flash_switch_bank>:
     476:	cf 93       	push	r28
     478:	c8 2f       	mov	r28, r24
     47a:	6a ea       	ldi	r22, 0xAA	; 170
     47c:	85 e5       	ldi	r24, 0x55	; 85
     47e:	95 e5       	ldi	r25, 0x55	; 85
     480:	b2 df       	rcall	.-156    	; 0x3e6 <flash_write_bus_cycle>
     482:	65 e5       	ldi	r22, 0x55	; 85
     484:	8a ea       	ldi	r24, 0xAA	; 170
     486:	9a e2       	ldi	r25, 0x2A	; 42
     488:	ae df       	rcall	.-164    	; 0x3e6 <flash_write_bus_cycle>
     48a:	60 eb       	ldi	r22, 0xB0	; 176
     48c:	85 e5       	ldi	r24, 0x55	; 85
     48e:	95 e5       	ldi	r25, 0x55	; 85
     490:	aa df       	rcall	.-172    	; 0x3e6 <flash_write_bus_cycle>
     492:	6c 2f       	mov	r22, r28
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	a6 df       	rcall	.-180    	; 0x3e6 <flash_write_bus_cycle>
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <flash_erase_4k_sector>:
     49e:	cf 93       	push	r28
     4a0:	c8 2f       	mov	r28, r24
     4a2:	6a ea       	ldi	r22, 0xAA	; 170
     4a4:	85 e5       	ldi	r24, 0x55	; 85
     4a6:	95 e5       	ldi	r25, 0x55	; 85
     4a8:	9e df       	rcall	.-196    	; 0x3e6 <flash_write_bus_cycle>
     4aa:	65 e5       	ldi	r22, 0x55	; 85
     4ac:	8a ea       	ldi	r24, 0xAA	; 170
     4ae:	9a e2       	ldi	r25, 0x2A	; 42
     4b0:	9a df       	rcall	.-204    	; 0x3e6 <flash_write_bus_cycle>
     4b2:	60 e8       	ldi	r22, 0x80	; 128
     4b4:	85 e5       	ldi	r24, 0x55	; 85
     4b6:	95 e5       	ldi	r25, 0x55	; 85
     4b8:	96 df       	rcall	.-212    	; 0x3e6 <flash_write_bus_cycle>
     4ba:	6a ea       	ldi	r22, 0xAA	; 170
     4bc:	85 e5       	ldi	r24, 0x55	; 85
     4be:	95 e5       	ldi	r25, 0x55	; 85
     4c0:	92 df       	rcall	.-220    	; 0x3e6 <flash_write_bus_cycle>
     4c2:	65 e5       	ldi	r22, 0x55	; 85
     4c4:	8a ea       	ldi	r24, 0xAA	; 170
     4c6:	9a e2       	ldi	r25, 0x2A	; 42
     4c8:	8e df       	rcall	.-228    	; 0x3e6 <flash_write_bus_cycle>
     4ca:	60 e3       	ldi	r22, 0x30	; 48
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	9c 2f       	mov	r25, r28
     4d0:	92 95       	swap	r25
     4d2:	90 7f       	andi	r25, 0xF0	; 240
     4d4:	88 df       	rcall	.-240    	; 0x3e6 <flash_write_bus_cycle>
     4d6:	2f e7       	ldi	r18, 0x7F	; 127
     4d8:	88 e3       	ldi	r24, 0x38	; 56
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	21 50       	subi	r18, 0x01	; 1
     4de:	80 40       	sbci	r24, 0x00	; 0
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <flash_erase_4k_sector+0x3e>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <flash_erase_4k_sector+0x48>
     4e6:	00 00       	nop
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <flash_write_byte>:
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	ec 01       	movw	r28, r24
     4f4:	16 2f       	mov	r17, r22
     4f6:	6a ea       	ldi	r22, 0xAA	; 170
     4f8:	85 e5       	ldi	r24, 0x55	; 85
     4fa:	95 e5       	ldi	r25, 0x55	; 85
     4fc:	74 df       	rcall	.-280    	; 0x3e6 <flash_write_bus_cycle>
     4fe:	65 e5       	ldi	r22, 0x55	; 85
     500:	8a ea       	ldi	r24, 0xAA	; 170
     502:	9a e2       	ldi	r25, 0x2A	; 42
     504:	70 df       	rcall	.-288    	; 0x3e6 <flash_write_bus_cycle>
     506:	60 ea       	ldi	r22, 0xA0	; 160
     508:	85 e5       	ldi	r24, 0x55	; 85
     50a:	95 e5       	ldi	r25, 0x55	; 85
     50c:	6c df       	rcall	.-296    	; 0x3e6 <flash_write_bus_cycle>
     50e:	61 2f       	mov	r22, r17
     510:	ce 01       	movw	r24, r28
     512:	69 df       	rcall	.-302    	; 0x3e6 <flash_write_bus_cycle>
     514:	8a e6       	ldi	r24, 0x6A	; 106
     516:	8a 95       	dec	r24
     518:	f1 f7       	brne	.-4      	; 0x516 <flash_write_byte+0x2a>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <flash_write_byte+0x30>
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <flash_write_sector>:
     524:	cf 92       	push	r12
     526:	df 92       	push	r13
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	7c 01       	movw	r14, r24
     536:	6a ea       	ldi	r22, 0xAA	; 170
     538:	85 e5       	ldi	r24, 0x55	; 85
     53a:	95 e5       	ldi	r25, 0x55	; 85
     53c:	54 df       	rcall	.-344    	; 0x3e6 <flash_write_bus_cycle>
     53e:	65 e5       	ldi	r22, 0x55	; 85
     540:	8a ea       	ldi	r24, 0xAA	; 170
     542:	9a e2       	ldi	r25, 0x2A	; 42
     544:	50 df       	rcall	.-352    	; 0x3e6 <flash_write_bus_cycle>
     546:	60 ea       	ldi	r22, 0xA0	; 160
     548:	85 e5       	ldi	r24, 0x55	; 85
     54a:	95 e5       	ldi	r25, 0x55	; 85
     54c:	4c df       	rcall	.-360    	; 0x3e6 <flash_write_bus_cycle>
     54e:	f6 94       	lsr	r15
     550:	fe 2c       	mov	r15, r14
     552:	ee 24       	eor	r14, r14
     554:	f7 94       	ror	r15
     556:	e7 94       	ror	r14
     558:	0f 2e       	mov	r0, r31
     55a:	f2 e9       	ldi	r31, 0x92	; 146
     55c:	cf 2e       	mov	r12, r31
     55e:	f2 e0       	ldi	r31, 0x02	; 2
     560:	df 2e       	mov	r13, r31
     562:	f0 2d       	mov	r31, r0
     564:	c2 e1       	ldi	r28, 0x12	; 18
     566:	d2 e0       	ldi	r29, 0x02	; 2
     568:	8e 01       	movw	r16, r28
     56a:	00 95       	com	r16
     56c:	10 95       	com	r17
     56e:	69 91       	ld	r22, Y+
     570:	c8 01       	movw	r24, r16
     572:	8c 0f       	add	r24, r28
     574:	9d 1f       	adc	r25, r29
     576:	8e 29       	or	r24, r14
     578:	9f 29       	or	r25, r15
     57a:	35 df       	rcall	.-406    	; 0x3e6 <flash_write_bus_cycle>
     57c:	cc 15       	cp	r28, r12
     57e:	dd 05       	cpc	r29, r13
     580:	b1 f7       	brne	.-20     	; 0x56e <flash_write_sector+0x4a>
     582:	2f ef       	ldi	r18, 0xFF	; 255
     584:	89 ef       	ldi	r24, 0xF9	; 249
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	21 50       	subi	r18, 0x01	; 1
     58a:	80 40       	sbci	r24, 0x00	; 0
     58c:	90 40       	sbci	r25, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <flash_write_sector+0x64>
     590:	00 c0       	rjmp	.+0      	; 0x592 <flash_write_sector+0x6e>
     592:	00 00       	nop
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	08 95       	ret

000005a6 <gb_flash_read_byte>:
     5a6:	12 b8       	out	0x02, r1	; 2
     5a8:	11 b8       	out	0x01, r1	; 1
     5aa:	08 de       	rcall	.-1008   	; 0x1bc <set_16bit_address>
     5ac:	a1 98       	cbi	0x14, 1	; 20
     5ae:	00 00       	nop
     5b0:	00 00       	nop
     5b2:	80 b1       	in	r24, 0x00	; 0
     5b4:	a1 9a       	sbi	0x14, 1	; 20
     5b6:	08 95       	ret

000005b8 <gb_flash_read_byte_fast>:
     5b8:	a1 98       	cbi	0x14, 1	; 20
     5ba:	00 00       	nop
     5bc:	00 00       	nop
     5be:	80 b1       	in	r24, 0x00	; 0
     5c0:	a1 9a       	sbi	0x14, 1	; 20
     5c2:	08 95       	ret

000005c4 <gb_flash_write_bus_cycle>:
     5c4:	cf 93       	push	r28
     5c6:	c6 2f       	mov	r28, r22
     5c8:	2f ef       	ldi	r18, 0xFF	; 255
     5ca:	21 b9       	out	0x01, r18	; 1
     5cc:	f7 dd       	rcall	.-1042   	; 0x1bc <set_16bit_address>
     5ce:	c2 b9       	out	0x02, r28	; 2
     5d0:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <flashWriteWePin>
     5d4:	81 34       	cpi	r24, 0x41	; 65
     5d6:	31 f4       	brne	.+12     	; 0x5e4 <gb_flash_write_bus_cycle+0x20>
     5d8:	a2 98       	cbi	0x14, 2	; 20
     5da:	00 00       	nop
     5dc:	00 00       	nop
     5de:	00 00       	nop
     5e0:	a2 9a       	sbi	0x14, 2	; 20
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <gb_flash_write_bus_cycle+0x2a>
     5e4:	a0 98       	cbi	0x14, 0	; 20
     5e6:	00 00       	nop
     5e8:	00 00       	nop
     5ea:	00 00       	nop
     5ec:	a0 9a       	sbi	0x14, 0	; 20
     5ee:	12 b8       	out	0x02, r1	; 2
     5f0:	11 b8       	out	0x01, r1	; 1
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <gb_flash_write_bus_cycle_fast>:
     5f6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     5fa:	81 bb       	out	0x11, r24	; 17
     5fc:	62 b9       	out	0x02, r22	; 2
     5fe:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <flashWriteWePin>
     602:	81 34       	cpi	r24, 0x41	; 65
     604:	31 f4       	brne	.+12     	; 0x612 <gb_flash_write_bus_cycle_fast+0x1c>
     606:	a2 98       	cbi	0x14, 2	; 20
     608:	00 00       	nop
     60a:	00 00       	nop
     60c:	00 00       	nop
     60e:	a2 9a       	sbi	0x14, 2	; 20
     610:	08 95       	ret
     612:	a0 98       	cbi	0x14, 0	; 20
     614:	00 00       	nop
     616:	00 00       	nop
     618:	00 00       	nop
     61a:	a0 9a       	sbi	0x14, 0	; 20
     61c:	08 95       	ret

0000061e <gb_flash_write_byte>:
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	7c 01       	movw	r14, r24
     62a:	c6 2f       	mov	r28, r22
     62c:	8f ef       	ldi	r24, 0xFF	; 255
     62e:	81 b9       	out	0x01, r24	; 1
     630:	04 e0       	ldi	r16, 0x04	; 4
     632:	12 e0       	ldi	r17, 0x02	; 2
     634:	f8 01       	movw	r30, r16
     636:	62 81       	ldd	r22, Z+2	; 0x02
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	dc df       	rcall	.-72     	; 0x5f6 <gb_flash_write_bus_cycle_fast>
     63e:	f8 01       	movw	r30, r16
     640:	66 81       	ldd	r22, Z+6	; 0x06
     642:	84 81       	ldd	r24, Z+4	; 0x04
     644:	95 81       	ldd	r25, Z+5	; 0x05
     646:	d7 df       	rcall	.-82     	; 0x5f6 <gb_flash_write_bus_cycle_fast>
     648:	f8 01       	movw	r30, r16
     64a:	62 85       	ldd	r22, Z+10	; 0x0a
     64c:	80 85       	ldd	r24, Z+8	; 0x08
     64e:	91 85       	ldd	r25, Z+9	; 0x09
     650:	d2 df       	rcall	.-92     	; 0x5f6 <gb_flash_write_bus_cycle_fast>
     652:	6c 2f       	mov	r22, r28
     654:	c7 01       	movw	r24, r14
     656:	cf df       	rcall	.-98     	; 0x5f6 <gb_flash_write_bus_cycle_fast>
     658:	fa e1       	ldi	r31, 0x1A	; 26
     65a:	fa 95       	dec	r31
     65c:	f1 f7       	brne	.-4      	; 0x65a <gb_flash_write_byte+0x3c>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <gb_flash_write_byte+0x42>
     660:	12 b8       	out	0x02, r1	; 2
     662:	11 b8       	out	0x01, r1	; 1
     664:	a9 df       	rcall	.-174    	; 0x5b8 <gb_flash_read_byte_fast>
     666:	c8 17       	cp	r28, r24
     668:	39 f0       	breq	.+14     	; 0x678 <gb_flash_write_byte+0x5a>
     66a:	a6 df       	rcall	.-180    	; 0x5b8 <gb_flash_read_byte_fast>
     66c:	95 e0       	ldi	r25, 0x05	; 5
     66e:	9a 95       	dec	r25
     670:	f1 f7       	brne	.-4      	; 0x66e <gb_flash_write_byte+0x50>
     672:	00 00       	nop
     674:	c8 13       	cpse	r28, r24
     676:	f9 cf       	rjmp	.-14     	; 0x66a <gb_flash_write_byte+0x4c>
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	08 95       	ret

00000684 <gb_flash_write_byte_special>:
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	8c 01       	movw	r16, r24
     690:	f6 2e       	mov	r15, r22
     692:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <flashBank1CommandWrites>
     696:	81 30       	cpi	r24, 0x01	; 1
     698:	61 f4       	brne	.+24     	; 0x6b2 <gb_flash_write_byte_special+0x2e>
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <__data_end>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	91 e2       	ldi	r25, 0x21	; 33
     6a4:	98 dd       	rcall	.-1232   	; 0x1d6 <write_8bit_data>
     6a6:	87 ec       	ldi	r24, 0xC7	; 199
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <gb_flash_write_byte_special+0x26>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <gb_flash_write_byte_special+0x2c>
     6b0:	00 00       	nop
     6b2:	c4 e0       	ldi	r28, 0x04	; 4
     6b4:	d2 e0       	ldi	r29, 0x02	; 2
     6b6:	6a 81       	ldd	r22, Y+2	; 0x02
     6b8:	88 81       	ld	r24, Y
     6ba:	99 81       	ldd	r25, Y+1	; 0x01
     6bc:	83 df       	rcall	.-250    	; 0x5c4 <gb_flash_write_bus_cycle>
     6be:	6e 81       	ldd	r22, Y+6	; 0x06
     6c0:	8c 81       	ldd	r24, Y+4	; 0x04
     6c2:	9d 81       	ldd	r25, Y+5	; 0x05
     6c4:	7f df       	rcall	.-258    	; 0x5c4 <gb_flash_write_bus_cycle>
     6c6:	6a 85       	ldd	r22, Y+10	; 0x0a
     6c8:	88 85       	ldd	r24, Y+8	; 0x08
     6ca:	99 85       	ldd	r25, Y+9	; 0x09
     6cc:	7b df       	rcall	.-266    	; 0x5c4 <gb_flash_write_bus_cycle>
     6ce:	6f 2d       	mov	r22, r15
     6d0:	c8 01       	movw	r24, r16
     6d2:	78 df       	rcall	.-272    	; 0x5c4 <gb_flash_write_bus_cycle>
     6d4:	87 ee       	ldi	r24, 0xE7	; 231
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <gb_flash_write_byte_special+0x54>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <gb_flash_write_byte_special+0x5a>
     6de:	00 00       	nop
     6e0:	12 b8       	out	0x02, r1	; 2
     6e2:	11 b8       	out	0x01, r1	; 1
     6e4:	2e 98       	cbi	0x05, 6	; 5
     6e6:	87 ec       	ldi	r24, 0xC7	; 199
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <gb_flash_write_byte_special+0x66>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <gb_flash_write_byte_special+0x6c>
     6f0:	00 00       	nop
     6f2:	2e 9a       	sbi	0x05, 6	; 5
     6f4:	87 ec       	ldi	r24, 0xC7	; 199
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <gb_flash_write_byte_special+0x74>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <gb_flash_write_byte_special+0x7a>
     6fe:	00 00       	nop
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	08 95       	ret

0000070c <gb_flash_write_byte_bank1_commands>:
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	8c 01       	movw	r16, r24
     71a:	c6 2f       	mov	r28, r22
     71c:	df ef       	ldi	r29, 0xFF	; 255
     71e:	d1 b9       	out	0x01, r29	; 1
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	91 e2       	ldi	r25, 0x21	; 33
     724:	4b dd       	rcall	.-1386   	; 0x1bc <set_16bit_address>
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	82 b9       	out	0x02, r24	; 2
     72a:	a0 98       	cbi	0x14, 0	; 20
     72c:	00 00       	nop
     72e:	a0 9a       	sbi	0x14, 0	; 20
     730:	0f 2e       	mov	r0, r31
     732:	f4 e0       	ldi	r31, 0x04	; 4
     734:	ef 2e       	mov	r14, r31
     736:	f2 e0       	ldi	r31, 0x02	; 2
     738:	ff 2e       	mov	r15, r31
     73a:	f0 2d       	mov	r31, r0
     73c:	f7 01       	movw	r30, r14
     73e:	62 81       	ldd	r22, Z+2	; 0x02
     740:	80 81       	ld	r24, Z
     742:	91 81       	ldd	r25, Z+1	; 0x01
     744:	3f df       	rcall	.-386    	; 0x5c4 <gb_flash_write_bus_cycle>
     746:	f7 01       	movw	r30, r14
     748:	66 81       	ldd	r22, Z+6	; 0x06
     74a:	84 81       	ldd	r24, Z+4	; 0x04
     74c:	95 81       	ldd	r25, Z+5	; 0x05
     74e:	3a df       	rcall	.-396    	; 0x5c4 <gb_flash_write_bus_cycle>
     750:	f7 01       	movw	r30, r14
     752:	62 85       	ldd	r22, Z+10	; 0x0a
     754:	80 85       	ldd	r24, Z+8	; 0x08
     756:	91 85       	ldd	r25, Z+9	; 0x09
     758:	35 df       	rcall	.-406    	; 0x5c4 <gb_flash_write_bus_cycle>
     75a:	d1 b9       	out	0x01, r29	; 1
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	91 e2       	ldi	r25, 0x21	; 33
     760:	2d dd       	rcall	.-1446   	; 0x1bc <set_16bit_address>
     762:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
     766:	82 b9       	out	0x02, r24	; 2
     768:	a0 98       	cbi	0x14, 0	; 20
     76a:	00 00       	nop
     76c:	a0 9a       	sbi	0x14, 0	; 20
     76e:	6c 2f       	mov	r22, r28
     770:	c8 01       	movw	r24, r16
     772:	28 df       	rcall	.-432    	; 0x5c4 <gb_flash_write_bus_cycle>
     774:	f5 e3       	ldi	r31, 0x35	; 53
     776:	fa 95       	dec	r31
     778:	f1 f7       	brne	.-4      	; 0x776 <gb_flash_write_byte_bank1_commands+0x6a>
     77a:	00 00       	nop
     77c:	12 b8       	out	0x02, r1	; 2
     77e:	11 b8       	out	0x01, r1	; 1
     780:	c8 01       	movw	r24, r16
     782:	11 df       	rcall	.-478    	; 0x5a6 <gb_flash_read_byte>
     784:	c8 17       	cp	r28, r24
     786:	41 f0       	breq	.+16     	; 0x798 <gb_flash_write_byte_bank1_commands+0x8c>
     788:	c8 01       	movw	r24, r16
     78a:	0d df       	rcall	.-486    	; 0x5a6 <gb_flash_read_byte>
     78c:	9a e1       	ldi	r25, 0x1A	; 26
     78e:	9a 95       	dec	r25
     790:	f1 f7       	brne	.-4      	; 0x78e <gb_flash_write_byte_bank1_commands+0x82>
     792:	00 c0       	rjmp	.+0      	; 0x794 <gb_flash_write_byte_bank1_commands+0x88>
     794:	c8 13       	cpse	r28, r24
     796:	f8 cf       	rjmp	.-16     	; 0x788 <gb_flash_write_byte_bank1_commands+0x7c>
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	08 95       	ret

000007a6 <gba_flash_write_bus_cycle>:
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	8c 01       	movw	r16, r24
     7ac:	22 27       	eor	r18, r18
     7ae:	33 27       	eor	r19, r19
     7b0:	02 b9       	out	0x02, r16	; 2
     7b2:	07 2f       	mov	r16, r23
     7b4:	18 2f       	mov	r17, r24
     7b6:	29 2f       	mov	r18, r25
     7b8:	33 27       	eor	r19, r19
     7ba:	e8 e0       	ldi	r30, 0x08	; 8
     7bc:	f1 e0       	ldi	r31, 0x01	; 1
     7be:	00 83       	st	Z, r16
     7c0:	61 bb       	out	0x11, r22	; 17
     7c2:	a5 98       	cbi	0x14, 5	; 20
     7c4:	50 83       	st	Z, r21
     7c6:	41 bb       	out	0x11, r20	; 17
     7c8:	a0 98       	cbi	0x14, 0	; 20
     7ca:	00 00       	nop
     7cc:	00 00       	nop
     7ce:	00 00       	nop
     7d0:	a0 9a       	sbi	0x14, 0	; 20
     7d2:	a5 9a       	sbi	0x14, 5	; 20
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <gba_flash_write_cycle_start_swapped>:
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	81 b9       	out	0x01, r24	; 1
     7de:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     7e2:	80 bb       	out	0x10, r24	; 16
     7e4:	12 b8       	out	0x02, r1	; 2
     7e6:	e8 e0       	ldi	r30, 0x08	; 8
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	95 e0       	ldi	r25, 0x05	; 5
     7ec:	90 83       	st	Z, r25
     7ee:	85 e5       	ldi	r24, 0x55	; 85
     7f0:	81 bb       	out	0x11, r24	; 17
     7f2:	a5 98       	cbi	0x14, 5	; 20
     7f4:	10 82       	st	Z, r1
     7f6:	29 ea       	ldi	r18, 0xA9	; 169
     7f8:	21 bb       	out	0x11, r18	; 17
     7fa:	a0 98       	cbi	0x14, 0	; 20
     7fc:	00 00       	nop
     7fe:	00 00       	nop
     800:	00 00       	nop
     802:	a0 9a       	sbi	0x14, 0	; 20
     804:	a5 9a       	sbi	0x14, 5	; 20
     806:	12 b8       	out	0x02, r1	; 2
     808:	22 e0       	ldi	r18, 0x02	; 2
     80a:	20 83       	st	Z, r18
     80c:	2a ea       	ldi	r18, 0xAA	; 170
     80e:	21 bb       	out	0x11, r18	; 17
     810:	a5 98       	cbi	0x14, 5	; 20
     812:	10 82       	st	Z, r1
     814:	26 e5       	ldi	r18, 0x56	; 86
     816:	21 bb       	out	0x11, r18	; 17
     818:	a0 98       	cbi	0x14, 0	; 20
     81a:	00 00       	nop
     81c:	00 00       	nop
     81e:	00 00       	nop
     820:	a0 9a       	sbi	0x14, 0	; 20
     822:	a5 9a       	sbi	0x14, 5	; 20
     824:	12 b8       	out	0x02, r1	; 2
     826:	90 83       	st	Z, r25
     828:	81 bb       	out	0x11, r24	; 17
     82a:	a5 98       	cbi	0x14, 5	; 20
     82c:	10 82       	st	Z, r1
     82e:	80 ea       	ldi	r24, 0xA0	; 160
     830:	81 bb       	out	0x11, r24	; 17
     832:	a0 98       	cbi	0x14, 0	; 20
     834:	00 00       	nop
     836:	00 00       	nop
     838:	00 00       	nop
     83a:	a0 9a       	sbi	0x14, 0	; 20
     83c:	a5 9a       	sbi	0x14, 5	; 20
     83e:	08 95       	ret

00000840 <gba_flash_write_cycle_start>:
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	81 b9       	out	0x01, r24	; 1
     844:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     848:	80 bb       	out	0x10, r24	; 16
     84a:	12 b8       	out	0x02, r1	; 2
     84c:	e8 e0       	ldi	r30, 0x08	; 8
     84e:	f1 e0       	ldi	r31, 0x01	; 1
     850:	95 e0       	ldi	r25, 0x05	; 5
     852:	90 83       	st	Z, r25
     854:	85 e5       	ldi	r24, 0x55	; 85
     856:	81 bb       	out	0x11, r24	; 17
     858:	a5 98       	cbi	0x14, 5	; 20
     85a:	10 82       	st	Z, r1
     85c:	2a ea       	ldi	r18, 0xAA	; 170
     85e:	21 bb       	out	0x11, r18	; 17
     860:	a0 98       	cbi	0x14, 0	; 20
     862:	00 00       	nop
     864:	00 00       	nop
     866:	00 00       	nop
     868:	a0 9a       	sbi	0x14, 0	; 20
     86a:	a5 9a       	sbi	0x14, 5	; 20
     86c:	12 b8       	out	0x02, r1	; 2
     86e:	32 e0       	ldi	r19, 0x02	; 2
     870:	30 83       	st	Z, r19
     872:	21 bb       	out	0x11, r18	; 17
     874:	a5 98       	cbi	0x14, 5	; 20
     876:	10 82       	st	Z, r1
     878:	81 bb       	out	0x11, r24	; 17
     87a:	a0 98       	cbi	0x14, 0	; 20
     87c:	00 00       	nop
     87e:	00 00       	nop
     880:	00 00       	nop
     882:	a0 9a       	sbi	0x14, 0	; 20
     884:	a5 9a       	sbi	0x14, 5	; 20
     886:	12 b8       	out	0x02, r1	; 2
     888:	90 83       	st	Z, r25
     88a:	81 bb       	out	0x11, r24	; 17
     88c:	a5 98       	cbi	0x14, 5	; 20
     88e:	10 82       	st	Z, r1
     890:	80 ea       	ldi	r24, 0xA0	; 160
     892:	81 bb       	out	0x11, r24	; 17
     894:	a0 98       	cbi	0x14, 0	; 20
     896:	00 00       	nop
     898:	00 00       	nop
     89a:	00 00       	nop
     89c:	a0 9a       	sbi	0x14, 0	; 20
     89e:	a5 9a       	sbi	0x14, 5	; 20
     8a0:	08 95       	ret

000008a2 <gba_flash_write_byte>:
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	6b 01       	movw	r12, r22
     8b0:	7c 01       	movw	r14, r24
     8b2:	ea 01       	movw	r28, r20
     8b4:	21 11       	cpse	r18, r1
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <gba_flash_write_byte+0x1a>
     8b8:	c3 df       	rcall	.-122    	; 0x840 <gba_flash_write_cycle_start>
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <gba_flash_write_byte+0x1c>
     8bc:	8e df       	rcall	.-228    	; 0x7da <gba_flash_write_cycle_start_swapped>
     8be:	ae 01       	movw	r20, r28
     8c0:	c7 01       	movw	r24, r14
     8c2:	b6 01       	movw	r22, r12
     8c4:	70 df       	rcall	.-288    	; 0x7a6 <gba_flash_write_bus_cycle>
     8c6:	2a e0       	ldi	r18, 0x0A	; 10
     8c8:	2a 95       	dec	r18
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <gba_flash_write_byte+0x26>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <gba_flash_write_byte+0x2c>
     8ce:	c7 01       	movw	r24, r14
     8d0:	b6 01       	movw	r22, r12
     8d2:	ba dc       	rcall	.-1676   	; 0x248 <gba_read_16bit_data>
     8d4:	c8 17       	cp	r28, r24
     8d6:	d9 07       	cpc	r29, r25
     8d8:	51 f0       	breq	.+20     	; 0x8ee <gba_flash_write_byte+0x4c>
     8da:	c7 01       	movw	r24, r14
     8dc:	b6 01       	movw	r22, r12
     8de:	b4 dc       	rcall	.-1688   	; 0x248 <gba_read_16bit_data>
     8e0:	2a e0       	ldi	r18, 0x0A	; 10
     8e2:	2a 95       	dec	r18
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <gba_flash_write_byte+0x40>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <gba_flash_write_byte+0x46>
     8e8:	c8 17       	cp	r28, r24
     8ea:	d9 07       	cpc	r29, r25
     8ec:	b1 f7       	brne	.-20     	; 0x8da <gba_flash_write_byte+0x38>
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	08 95       	ret

000008fc <setup>:
     8fc:	85 b7       	in	r24, 0x35	; 53
     8fe:	87 7f       	andi	r24, 0xF7	; 247
     900:	85 bf       	out	0x35, r24	; 53
     902:	e0 e6       	ldi	r30, 0x60	; 96
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	88 e1       	ldi	r24, 0x18	; 24
     908:	80 83       	st	Z, r24
     90a:	10 82       	st	Z, r1
     90c:	48 dc       	rcall	.-1904   	; 0x19e <rd_wr_csmreq_cs2_reset>
     90e:	84 b1       	in	r24, 0x04	; 4
     910:	80 6c       	ori	r24, 0xC0	; 192
     912:	84 b9       	out	0x04, r24	; 4
     914:	83 b3       	in	r24, 0x13	; 19
     916:	83 62       	ori	r24, 0x23	; 35
     918:	83 bb       	out	0x13, r24	; 19
     91a:	12 b8       	out	0x02, r1	; 2
     91c:	11 b8       	out	0x01, r1	; 1
     91e:	11 ba       	out	0x11, r1	; 17
     920:	10 ba       	out	0x10, r1	; 16
     922:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     926:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     92a:	78 94       	sei
     92c:	08 95       	ret

0000092e <main>:
#define MCUCSR MCUCR
#define WDTCR WDTCSR
#define UDR UDR0


int main(void) {
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	27 97       	sbiw	r28, 0x07	; 7
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
	setup();
     942:	dc df       	rcall	.-72     	; 0x8fc <setup>
	usart_init ( BAUD_PRESCALE );
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	14 dc       	rcall	.-2008   	; 0x172 <usart_init>

	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t resetCommonLines = 1;
	USART_Transmit(PCB_VERSION);	
     94a:	84 e0       	ldi	r24, 0x04	; 4
     94c:	f4 db       	rcall	.-2072   	; 0x136 <USART_Transmit>
     94e:	21 e0       	ldi	r18, 0x01	; 1
	setup();
	usart_init ( BAUD_PRESCALE );

	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t resetCommonLines = 1;
     950:	29 83       	std	Y+1, r18	; 0x01
     952:	31 e0       	ldi	r19, 0x01	; 1
int main(void) {
	setup();
	usart_init ( BAUD_PRESCALE );

	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
     954:	3c 83       	std	Y+4, r19	; 0x04
     956:	81 2c       	mov	r8, r1

int main(void) {
	setup();
	usart_init ( BAUD_PRESCALE );

	uint32_t address = 0;
     958:	91 2c       	mov	r9, r1
     95a:	54 01       	movw	r10, r8
     95c:	82 e1       	ldi	r24, 0x12	; 18
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	80 95       	com	r24
     962:	90 95       	com	r25
     964:	9b 83       	std	Y+3, r25	; 0x03
     966:	8a 83       	std	Y+2, r24	; 0x02
     968:	0f 2e       	mov	r0, r31
     96a:	fb e1       	ldi	r31, 0x1B	; 27
     96c:	2f 2e       	mov	r2, r31
     96e:	f3 e0       	ldi	r31, 0x03	; 3
     970:	3f 2e       	mov	r3, r31
     972:	f0 2d       	mov	r31, r0
     974:	02 c0       	rjmp	.+4      	; 0x97a <main+0x4c>
     976:	91 e0       	ldi	r25, 0x01	; 1
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
			char commonChar = USART_Receive();
			if (commonChar == '1') {
				resetCommonLines = 1;
     978:	99 83       	std	Y+1, r25	; 0x01
     97a:	e9 81       	ldd	r30, Y+1	; 0x01
	uint32_t address = 0;
	uint8_t eepromSize = EEPROM_4KBIT;
	uint8_t resetCommonLines = 1;
	USART_Transmit(PCB_VERSION);	
	while(1) {
		if (resetCommonLines == 1) {
     97c:	e1 30       	cpi	r30, 0x01	; 1
			rd_wr_csmreq_cs2_reset();
     97e:	09 f4       	brne	.+2      	; 0x982 <main+0x54>
     980:	0e dc       	rcall	.-2020   	; 0x19e <rd_wr_csmreq_cs2_reset>
		}
		receivedChar = USART_Receive(); // Wait for 1 byte of data
     982:	d1 db       	rcall	.-2142   	; 0x126 <USART_Receive>
     984:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
		
		// Return the cart mode in use
		if (receivedChar == CART_MODE) {
     988:	83 34       	cpi	r24, 0x43	; 67
     98a:	21 f4       	brne	.+8      	; 0x994 <main+0x66>
			USART_Transmit(cartMode);
     98c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     990:	d2 db       	rcall	.-2140   	; 0x136 <USART_Transmit>
     992:	f3 cf       	rjmp	.-26     	; 0x97a <main+0x4c>

		}
		
		// Change to GB mode or GBA mode if requested
		else if (receivedChar == GB_CART_MODE) {
     994:	87 34       	cpi	r24, 0x47	; 71
			gb_mode();
     996:	11 f4       	brne	.+4      	; 0x99c <main+0x6e>
     998:	07 dc       	rcall	.-2034   	; 0x1a8 <gb_mode>
     99a:	ef cf       	rjmp	.-34     	; 0x97a <main+0x4c>
		}
		else if (receivedChar == GBA_CART_MODE) {
     99c:	87 36       	cpi	r24, 0x67	; 103
     99e:	11 f4       	brne	.+4      	; 0x9a4 <main+0x76>
			gba_mode();
     9a0:	30 dc       	rcall	.-1952   	; 0x202 <gba_mode>
     9a2:	eb cf       	rjmp	.-42     	; 0x97a <main+0x4c>
     9a4:	83 33       	cpi	r24, 0x33	; 51
		}
		
		// Switch voltage if requested
		else if (receivedChar == VOLTAGE_3_3V) {
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <main+0x82>
     9a8:	82 e0       	ldi	r24, 0x02	; 2
			//PORTD &= ~(1<<VOLTAGE_SELECT);
			cartMode = GBA_MODE;
     9aa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     9ae:	e5 cf       	rjmp	.-54     	; 0x97a <main+0x4c>
     9b0:	85 33       	cpi	r24, 0x35	; 53
			//PORTE |= (1<<LED_3V);
			//PORTD &= ~(1<<LED_5V);
		}
		else if (receivedChar == VOLTAGE_5V) {
     9b2:	21 f4       	brne	.+8      	; 0x9bc <main+0x8e>
			//PORTD |= (1<<VOLTAGE_SELECT);
			cartMode = GB_MODE;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     9ba:	df cf       	rjmp	.-66     	; 0x97a <main+0x4c>
		
		
		// ****** Gameboy / Gameboy Colour ******
		
		// Set address
		else if (receivedChar == SET_START_ADDRESS) {
     9bc:	81 34       	cpi	r24, 0x41	; 65
			usart_read_chars(); // Read start address
     9be:	59 f4       	brne	.+22     	; 0x9d6 <main+0xa8>
     9c0:	e3 db       	rcall	.-2106   	; 0x188 <usart_read_chars>
			address = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     9c2:	40 e1       	ldi	r20, 0x10	; 16
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	82 e1       	ldi	r24, 0x12	; 18
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	10 d7       	rcall	.+3616   	; 0x17f0 <strtol>
     9d0:	4b 01       	movw	r8, r22
     9d2:	5c 01       	movw	r10, r24
     9d4:	d2 cf       	rjmp	.-92     	; 0x97a <main+0x4c>
		}
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
     9d6:	82 35       	cpi	r24, 0x52	; 82
     9d8:	29 f5       	brne	.+74     	; 0xa24 <main+0xf6>
			gb_mode();
     9da:	e6 db       	rcall	.-2100   	; 0x1a8 <gb_mode>
     9dc:	81 e3       	ldi	r24, 0x31	; 49
			receivedChar = '1';
     9de:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
     9e2:	84 01       	movw	r16, r8
     9e4:	00 5c       	subi	r16, 0xC0	; 192
			while (receivedChar == '1') {
				PORTB |= (1<<ACTIVITY_LED);  //changed to portb
     9e6:	1f 4f       	sbci	r17, 0xFF	; 255
     9e8:	2f 9a       	sbi	0x05, 7	; 5
     9ea:	9e 82       	std	Y+6, r9	; 0x06
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(read_8bit_data(address));
     9ec:	8d 82       	std	Y+5, r8	; 0x05
     9ee:	8d 81       	ldd	r24, Y+5	; 0x05
     9f0:	9e 81       	ldd	r25, Y+6	; 0x06
     9f2:	e8 db       	rcall	.-2096   	; 0x1c4 <read_8bit_data>
     9f4:	a0 db       	rcall	.-2240   	; 0x136 <USART_Transmit>
     9f6:	2d 81       	ldd	r18, Y+5	; 0x05
     9f8:	3e 81       	ldd	r19, Y+6	; 0x06
     9fa:	2f 5f       	subi	r18, 0xFF	; 255
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	3e 83       	std	Y+6, r19	; 0x06
     a00:	2d 83       	std	Y+5, r18	; 0x05
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTB |= (1<<ACTIVITY_LED);  //changed to portb
				for (uint8_t x = 0; x < 64; x++) {
     a02:	20 17       	cp	r18, r16
     a04:	31 07       	cpc	r19, r17
     a06:	99 f7       	brne	.-26     	; 0x9ee <main+0xc0>
     a08:	30 e4       	ldi	r19, 0x40	; 64
     a0a:	83 0e       	add	r8, r19
     a0c:	91 1c       	adc	r9, r1
     a0e:	a1 1c       	adc	r10, r1
					USART_Transmit(read_8bit_data(address));
					address++;
				}
				
				PORTB &= ~(1<<ACTIVITY_LED);	//changed to PORTB
     a10:	b1 1c       	adc	r11, r1
				receivedChar = USART_Receive();
     a12:	2f 98       	cbi	0x05, 7	; 5
     a14:	88 db       	rcall	.-2288   	; 0x126 <USART_Receive>
     a16:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
     a1a:	00 5c       	subi	r16, 0xC0	; 192
		
		// Read 64 bytes of ROM/RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == READ_ROM_RAM) {
			gb_mode();
			receivedChar = '1';
			while (receivedChar == '1') {
     a1c:	1f 4f       	sbci	r17, 0xFF	; 255
     a1e:	81 33       	cpi	r24, 0x31	; 49
     a20:	19 f3       	breq	.-58     	; 0x9e8 <main+0xba>
				receivedChar = USART_Receive();
			}
		}
		
		// Write 64 bytes to RAM on address (and increment)
		else if (receivedChar == WRITE_RAM) {
     a22:	ab cf       	rjmp	.-170    	; 0x97a <main+0x4c>
     a24:	87 35       	cpi	r24, 0x57	; 87
			gb_mode();
     a26:	59 f5       	brne	.+86     	; 0xa7e <main+0x150>
     a28:	bf db       	rcall	.-2178   	; 0x1a8 <gb_mode>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
     a2a:	80 e4       	ldi	r24, 0x40	; 64
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	8b db       	rcall	.-2282   	; 0x146 <usart_read_bytes>
     a30:	2f 9a       	sbi	0x05, 7	; 5
			
			PORTB |= (1<<ACTIVITY_LED);
     a32:	0f 2e       	mov	r0, r31
     a34:	f2 e5       	ldi	r31, 0x52	; 82
     a36:	ef 2e       	mov	r14, r31
     a38:	f2 e0       	ldi	r31, 0x02	; 2
     a3a:	ff 2e       	mov	r15, r31
     a3c:	f0 2d       	mov	r31, r0
     a3e:	82 e1       	ldi	r24, 0x12	; 18
     a40:	92 e0       	ldi	r25, 0x02	; 2
			for (uint8_t x = 0; x < 64; x++) {
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
     a42:	0a 81       	ldd	r16, Y+2	; 0x02
     a44:	1b 81       	ldd	r17, Y+3	; 0x03
     a46:	08 0d       	add	r16, r8
     a48:	19 1d       	adc	r17, r9
     a4a:	9e 83       	std	Y+6, r25	; 0x06
     a4c:	8d 83       	std	Y+5, r24	; 0x05
     a4e:	ed 81       	ldd	r30, Y+5	; 0x05
     a50:	fe 81       	ldd	r31, Y+6	; 0x06
     a52:	61 91       	ld	r22, Z+
     a54:	fe 83       	std	Y+6, r31	; 0x06
     a56:	ed 83       	std	Y+5, r30	; 0x05
     a58:	41 e0       	ldi	r20, 0x01	; 1
     a5a:	cf 01       	movw	r24, r30
     a5c:	80 0f       	add	r24, r16
     a5e:	91 1f       	adc	r25, r17
     a60:	ba db       	rcall	.-2188   	; 0x1d6 <write_8bit_data>
			
			// Read 64 bytes first as CH340G sends them all at once
			usart_read_bytes(64);
			
			PORTB |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     a62:	2d 81       	ldd	r18, Y+5	; 0x05
     a64:	3e 81       	ldd	r19, Y+6	; 0x06
     a66:	2e 15       	cp	r18, r14
     a68:	3f 05       	cpc	r19, r15
     a6a:	89 f7       	brne	.-30     	; 0xa4e <main+0x120>
     a6c:	30 e4       	ldi	r19, 0x40	; 64
     a6e:	83 0e       	add	r8, r19
     a70:	91 1c       	adc	r9, r1
				write_8bit_data(address, receivedBuffer[x], MEMORY_WRITE);
				address++;
			}
			
			PORTB &= ~(1<<ACTIVITY_LED);
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     a72:	a1 1c       	adc	r10, r1
     a74:	b1 1c       	adc	r11, r1
     a76:	2f 98       	cbi	0x05, 7	; 5
     a78:	81 e3       	ldi	r24, 0x31	; 49
		}
		
		// Set bank address and write a byte
		else if (receivedChar == SET_BANK) {
     a7a:	5d db       	rcall	.-2374   	; 0x136 <USART_Transmit>
			gb_mode();
     a7c:	7e cf       	rjmp	.-260    	; 0x97a <main+0x4c>
     a7e:	82 34       	cpi	r24, 0x42	; 66
			
			usart_read_chars(); // Read start address
     a80:	e1 f4       	brne	.+56     	; 0xaba <main+0x18c>
			uint16_t bankaddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     a82:	92 db       	rcall	.-2268   	; 0x1a8 <gb_mode>
     a84:	81 db       	rcall	.-2302   	; 0x188 <usart_read_chars>
     a86:	40 e1       	ldi	r20, 0x10	; 16
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	82 e1       	ldi	r24, 0x12	; 18
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	ae d6       	rcall	.+3420   	; 0x17f0 <strtol>
			
			receivedChar = USART_Receive(); // Wait for bank number
     a94:	6b 01       	movw	r12, r22
     a96:	7c 01       	movw	r14, r24
     a98:	46 db       	rcall	.-2420   	; 0x126 <USART_Receive>
			if (receivedChar == 'B') {
     a9a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
     a9e:	82 34       	cpi	r24, 0x42	; 66
				usart_read_chars(); // Read data
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <main+0x176>
     aa2:	6b cf       	rjmp	.-298    	; 0x97a <main+0x4c>
				uint8_t data = atoi(receivedBuffer); // Convert data string to dec
     aa4:	71 db       	rcall	.-2334   	; 0x188 <usart_read_chars>
     aa6:	82 e1       	ldi	r24, 0x12	; 18
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	cd d7       	rcall	.+3994   	; 0x1a46 <atoi>
				lastBankAccessed = data; // Store the last bank accessed (used for flash carts that need it)
     aac:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
				
				write_8bit_data(bankaddress, data, BANK_WRITE);
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	68 2f       	mov	r22, r24
     ab4:	c6 01       	movw	r24, r12
     ab6:	8f db       	rcall	.-2274   	; 0x1d6 <write_8bit_data>
     ab8:	60 cf       	rjmp	.-320    	; 0x97a <main+0x4c>
     aba:	82 37       	cpi	r24, 0x72	; 114
		
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
     abc:	09 f4       	brne	.+2      	; 0xac0 <main+0x192>
     abe:	7d c6       	rjmp	.+3322   	; 0x17ba <main+0xe8c>
     ac0:	8a 36       	cpi	r24, 0x6A	; 106
     ac2:	b9 f5       	brne	.+110    	; 0xb32 <main+0x204>
     ac4:	9e db       	rcall	.-2244   	; 0x202 <gba_mode>
			gba_mode();
     ac6:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <receivedChar>
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
     aca:	8a 36       	cpi	r24, 0x6A	; 106
     acc:	09 f0       	breq	.+2      	; 0xad0 <main+0x1a2>
     ace:	7d c6       	rjmp	.+3322   	; 0x17ca <main+0xe9c>
     ad0:	10 e8       	ldi	r17, 0x80	; 128
				readEnd = 128;
			}
			
			receivedChar = '1';
     ad2:	81 e3       	ldi	r24, 0x31	; 49
     ad4:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
     ad8:	44 24       	eor	r4, r4
     ada:	4a 94       	dec	r4
     adc:	41 0e       	add	r4, r17
     ade:	51 2c       	mov	r5, r1
     ae0:	61 2c       	mov	r6, r1
     ae2:	71 2c       	mov	r7, r1
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	48 1a       	sub	r4, r24
     ae8:	58 0a       	sbc	r5, r24
     aea:	68 0a       	sbc	r6, r24
			while (receivedChar == '1') {
				PORTB |= (1<<ACTIVITY_LED);
     aec:	78 0a       	sbc	r7, r24
				
				for (uint8_t x = 0; x < readEnd; x++) {
     aee:	2f 9a       	sbi	0x05, 7	; 5
     af0:	11 23       	and	r17, r17
     af2:	c1 f0       	breq	.+48     	; 0xb24 <main+0x1f6>
     af4:	75 01       	movw	r14, r10
					uint16_t dataRead = gba_read_16bit_data(address);
     af6:	64 01       	movw	r12, r8
     af8:	1d 82       	std	Y+5, r1	; 0x05
     afa:	c7 01       	movw	r24, r14
     afc:	b6 01       	movw	r22, r12
     afe:	a4 db       	rcall	.-2232   	; 0x248 <gba_read_16bit_data>
					
					// Low byte & High byte
					USART_Transmit(dataRead & 0xFF);
     b00:	9f 83       	std	Y+7, r25	; 0x07
					USART_Transmit(dataRead >> 8);
     b02:	19 db       	rcall	.-2510   	; 0x136 <USART_Transmit>
     b04:	8f 81       	ldd	r24, Y+7	; 0x07
     b06:	17 db       	rcall	.-2514   	; 0x136 <USART_Transmit>
					
					address++;
     b08:	ef ef       	ldi	r30, 0xFF	; 255
     b0a:	ce 1a       	sub	r12, r30
     b0c:	de 0a       	sbc	r13, r30
     b0e:	ee 0a       	sbc	r14, r30
     b10:	fe 0a       	sbc	r15, r30
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTB |= (1<<ACTIVITY_LED);
				
				for (uint8_t x = 0; x < readEnd; x++) {
     b12:	fd 81       	ldd	r31, Y+5	; 0x05
     b14:	ff 5f       	subi	r31, 0xFF	; 255
     b16:	fd 83       	std	Y+5, r31	; 0x05
     b18:	1f 13       	cpse	r17, r31
     b1a:	ef cf       	rjmp	.-34     	; 0xafa <main+0x1cc>
     b1c:	84 0c       	add	r8, r4
     b1e:	95 1c       	adc	r9, r5
					USART_Transmit(dataRead >> 8);
					
					address++;
				}
				
				PORTB &= ~(1<<ACTIVITY_LED);
     b20:	a6 1c       	adc	r10, r6
				receivedChar = USART_Receive();
     b22:	b7 1c       	adc	r11, r7
     b24:	2f 98       	cbi	0x05, 7	; 5
     b26:	ff da       	rcall	.-2562   	; 0x126 <USART_Receive>
     b28:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
			while (receivedChar == '1') {
     b2c:	81 33       	cpi	r24, 0x31	; 49
     b2e:	f9 f2       	breq	.-66     	; 0xaee <main+0x1c0>
			}
		}
		
		// ---------- SRAM ----------
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
     b30:	24 cf       	rjmp	.-440    	; 0x97a <main+0x4c>
     b32:	8d 36       	cpi	r24, 0x6D	; 109
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
     b34:	31 f5       	brne	.+76     	; 0xb82 <main+0x254>
			
			receivedChar = '1';
     b36:	38 db       	rcall	.-2448   	; 0x1a8 <gb_mode>
     b38:	81 e3       	ldi	r24, 0x31	; 49
     b3a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
     b3e:	84 01       	movw	r16, r8
			while (receivedChar == '1') {
				PORTB |= (1<<ACTIVITY_LED);
     b40:	00 5c       	subi	r16, 0xC0	; 192
     b42:	1f 4f       	sbci	r17, 0xFF	; 255
     b44:	2f 9a       	sbi	0x05, 7	; 5
				for (uint8_t x = 0; x < 64; x++) {
					USART_Transmit(gba_read_ram_8bit_data(address));
     b46:	9e 82       	std	Y+6, r9	; 0x06
     b48:	8d 82       	std	Y+5, r8	; 0x05
     b4a:	8d 81       	ldd	r24, Y+5	; 0x05
     b4c:	9e 81       	ldd	r25, Y+6	; 0x06
     b4e:	8e db       	rcall	.-2276   	; 0x26c <gba_read_ram_8bit_data>
     b50:	f2 da       	rcall	.-2588   	; 0x136 <USART_Transmit>
     b52:	2d 81       	ldd	r18, Y+5	; 0x05
     b54:	3e 81       	ldd	r19, Y+6	; 0x06
     b56:	2f 5f       	subi	r18, 0xFF	; 255
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
				PORTB |= (1<<ACTIVITY_LED);
				for (uint8_t x = 0; x < 64; x++) {
     b5a:	3e 83       	std	Y+6, r19	; 0x06
     b5c:	2d 83       	std	Y+5, r18	; 0x05
     b5e:	20 17       	cp	r18, r16
     b60:	31 07       	cpc	r19, r17
     b62:	99 f7       	brne	.-26     	; 0xb4a <main+0x21c>
     b64:	30 e4       	ldi	r19, 0x40	; 64
     b66:	83 0e       	add	r8, r19
     b68:	91 1c       	adc	r9, r1
					USART_Transmit(gba_read_ram_8bit_data(address));
					address++;
				}
				
				PORTB &= ~(1<<ACTIVITY_LED);
     b6a:	a1 1c       	adc	r10, r1
				receivedChar = USART_Receive();
     b6c:	b1 1c       	adc	r11, r1
     b6e:	2f 98       	cbi	0x05, 7	; 5
     b70:	da da       	rcall	.-2636   	; 0x126 <USART_Receive>
     b72:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
     b76:	00 5c       	subi	r16, 0xC0	; 192
		// Read RAM from address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_SRAM) {
			gb_mode(); // Set GB mode as it uses 16 bit address with 8 bit data
			
			receivedChar = '1';
			while (receivedChar == '1') {
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
				
				PORTB &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
			}
			
			gba_mode(); // Set back
     b7a:	81 33       	cpi	r24, 0x31	; 49
     b7c:	19 f3       	breq	.-58     	; 0xb44 <main+0x216>
     b7e:	41 db       	rcall	.-2430   	; 0x202 <gba_mode>
		}
		
		// Write to RAM on address (and increment) with 64 bytes of data
		else if (receivedChar == GBA_WRITE_SRAM) {
     b80:	fc ce       	rjmp	.-520    	; 0x97a <main+0x4c>
     b82:	87 37       	cpi	r24, 0x77	; 119
			gb_mode();
     b84:	59 f5       	brne	.+86     	; 0xbdc <main+0x2ae>
     b86:	10 db       	rcall	.-2528   	; 0x1a8 <gb_mode>
			
			usart_read_bytes(64);
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	dc da       	rcall	.-2632   	; 0x146 <usart_read_bytes>
			
			PORTB |= (1<<ACTIVITY_LED);
     b8e:	2f 9a       	sbi	0x05, 7	; 5
     b90:	0f 2e       	mov	r0, r31
     b92:	f2 e5       	ldi	r31, 0x52	; 82
     b94:	ef 2e       	mov	r14, r31
     b96:	f2 e0       	ldi	r31, 0x02	; 2
     b98:	ff 2e       	mov	r15, r31
			for (uint8_t x = 0; x < 64; x++) {
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
     b9a:	f0 2d       	mov	r31, r0
     b9c:	82 e1       	ldi	r24, 0x12	; 18
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	0a 81       	ldd	r16, Y+2	; 0x02
     ba2:	1b 81       	ldd	r17, Y+3	; 0x03
     ba4:	08 0d       	add	r16, r8
     ba6:	19 1d       	adc	r17, r9
     ba8:	9e 83       	std	Y+6, r25	; 0x06
     baa:	8d 83       	std	Y+5, r24	; 0x05
     bac:	ed 81       	ldd	r30, Y+5	; 0x05
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTB |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     bae:	fe 81       	ldd	r31, Y+6	; 0x06
     bb0:	61 91       	ld	r22, Z+
     bb2:	fe 83       	std	Y+6, r31	; 0x06
     bb4:	ed 83       	std	Y+5, r30	; 0x05
     bb6:	cf 01       	movw	r24, r30
     bb8:	80 0f       	add	r24, r16
     bba:	91 1f       	adc	r25, r17
				gba_write_ram_8bit_data(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     bbc:	60 db       	rcall	.-2368   	; 0x27e <gba_write_ram_8bit_data>
     bbe:	2d 81       	ldd	r18, Y+5	; 0x05
			
			PORTB &= ~(1<<ACTIVITY_LED);
     bc0:	3e 81       	ldd	r19, Y+6	; 0x06
			gba_mode(); // Set back
     bc2:	2e 15       	cp	r18, r14
     bc4:	3f 05       	cpc	r19, r15
		}
		
		// Write 1 byte to SRAM address
		else if (receivedChar == GBA_WRITE_ONE_BYTE_SRAM) {
     bc6:	91 f7       	brne	.-28     	; 0xbac <main+0x27e>
			gb_mode();
     bc8:	30 e4       	ldi	r19, 0x40	; 64
     bca:	83 0e       	add	r8, r19
			
			uint8_t data = USART_Receive();
     bcc:	91 1c       	adc	r9, r1
     bce:	a1 1c       	adc	r10, r1
			gba_write_ram_8bit_data(address, data);
     bd0:	b1 1c       	adc	r11, r1
     bd2:	81 e3       	ldi	r24, 0x31	; 49
     bd4:	b0 da       	rcall	.-2720   	; 0x136 <USART_Transmit>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     bd6:	2f 98       	cbi	0x05, 7	; 5
     bd8:	14 db       	rcall	.-2520   	; 0x202 <gba_mode>
			
			gba_mode(); // Set back
     bda:	cf ce       	rjmp	.-610    	; 0x97a <main+0x4c>
     bdc:	8f 36       	cpi	r24, 0x6F	; 111
     bde:	49 f4       	brne	.+18     	; 0xbf2 <main+0x2c4>
		}
		
		
		// ---------- FLASH ----------
		// Read the Flash Manufacturer and Device ID
		else if (receivedChar == GBA_FLASH_READ_ID) {
     be0:	e3 da       	rcall	.-2618   	; 0x1a8 <gb_mode>
			gb_mode();
     be2:	a1 da       	rcall	.-2750   	; 0x126 <USART_Receive>
			
			flash_read_chip_id();
     be4:	68 2f       	mov	r22, r24
     be6:	c4 01       	movw	r24, r8
			USART_Transmit(flashChipIdBuffer[0]);
     be8:	4a db       	rcall	.-2412   	; 0x27e <gba_write_ram_8bit_data>
     bea:	81 e3       	ldi	r24, 0x31	; 49
     bec:	a4 da       	rcall	.-2744   	; 0x136 <USART_Transmit>
     bee:	09 db       	rcall	.-2542   	; 0x202 <gba_mode>
     bf0:	c4 ce       	rjmp	.-632    	; 0x97a <main+0x4c>
			USART_Transmit(flashChipIdBuffer[1]);
     bf2:	89 36       	cpi	r24, 0x69	; 105
     bf4:	59 f4       	brne	.+22     	; 0xc0c <main+0x2de>
     bf6:	d8 da       	rcall	.-2640   	; 0x1a8 <gb_mode>
     bf8:	03 dc       	rcall	.-2042   	; 0x400 <flash_read_chip_id>
			
			gba_mode(); // Set back
     bfa:	e0 e1       	ldi	r30, 0x10	; 16
     bfc:	f2 e0       	ldi	r31, 0x02	; 2
     bfe:	80 81       	ld	r24, Z
		}
		
		// Change bank
		else if (receivedChar == GBA_FLASH_SET_BANK) {
     c00:	9a da       	rcall	.-2764   	; 0x136 <USART_Transmit>
     c02:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <flashChipIdBuffer+0x1>
			usart_read_chars(); // Read data
     c06:	97 da       	rcall	.-2770   	; 0x136 <USART_Transmit>
			uint8_t bank = atoi(receivedBuffer); // Convert data string to dec
     c08:	fc da       	rcall	.-2568   	; 0x202 <gba_mode>
     c0a:	b7 ce       	rjmp	.-658    	; 0x97a <main+0x4c>
     c0c:	8b 36       	cpi	r24, 0x6B	; 107
     c0e:	51 f4       	brne	.+20     	; 0xc24 <main+0x2f6>
     c10:	bb da       	rcall	.-2698   	; 0x188 <usart_read_chars>
			
			gb_mode();
     c12:	82 e1       	ldi	r24, 0x12	; 18
			flash_switch_bank(bank);
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	17 d7       	rcall	.+3630   	; 0x1a46 <atoi>
     c18:	8d 83       	std	Y+5, r24	; 0x05
			
			gba_mode(); // Set back
     c1a:	c6 da       	rcall	.-2676   	; 0x1a8 <gb_mode>
     c1c:	8d 81       	ldd	r24, Y+5	; 0x05
     c1e:	2b dc       	rcall	.-1962   	; 0x476 <flash_switch_bank>
		}
		
		// Erase 4K sector on Flash (sector 0 to 15 for 512Kbit)
		else if (receivedChar == GBA_FLASH_4K_SECTOR_ERASE) {
     c20:	f0 da       	rcall	.-2592   	; 0x202 <gba_mode>
     c22:	ab ce       	rjmp	.-682    	; 0x97a <main+0x4c>
			gb_mode();
     c24:	83 37       	cpi	r24, 0x73	; 115
     c26:	79 f4       	brne	.+30     	; 0xc46 <main+0x318>
			
			usart_read_chars(); // Read sector
     c28:	bf da       	rcall	.-2690   	; 0x1a8 <gb_mode>
			uint8_t sectorAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
     c2a:	ae da       	rcall	.-2724   	; 0x188 <usart_read_chars>
     c2c:	40 e1       	ldi	r20, 0x10	; 16
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	82 e1       	ldi	r24, 0x12	; 18
     c36:	92 e0       	ldi	r25, 0x02	; 2
			
			flash_erase_4k_sector(sectorAddress);
     c38:	db d5       	rcall	.+2998   	; 0x17f0 <strtol>
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     c3a:	86 2f       	mov	r24, r22
     c3c:	30 dc       	rcall	.-1952   	; 0x49e <flash_erase_4k_sector>
     c3e:	81 e3       	ldi	r24, 0x31	; 49
			
			gba_mode(); // Set back
     c40:	7a da       	rcall	.-2828   	; 0x136 <USART_Transmit>
     c42:	df da       	rcall	.-2626   	; 0x202 <gba_mode>
     c44:	9a ce       	rjmp	.-716    	; 0x97a <main+0x4c>
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_BYTE) {
     c46:	82 36       	cpi	r24, 0x62	; 98
			gb_mode();
     c48:	59 f5       	brne	.+86     	; 0xca0 <main+0x372>
			
			usart_read_bytes(64);
     c4a:	ae da       	rcall	.-2724   	; 0x1a8 <gb_mode>
     c4c:	80 e4       	ldi	r24, 0x40	; 64
     c4e:	90 e0       	ldi	r25, 0x00	; 0
			
			PORTB |= (1<<ACTIVITY_LED);
     c50:	7a da       	rcall	.-2828   	; 0x146 <usart_read_bytes>
     c52:	2f 9a       	sbi	0x05, 7	; 5
     c54:	0f 2e       	mov	r0, r31
     c56:	f2 e5       	ldi	r31, 0x52	; 82
     c58:	ef 2e       	mov	r14, r31
     c5a:	f2 e0       	ldi	r31, 0x02	; 2
     c5c:	ff 2e       	mov	r15, r31
     c5e:	f0 2d       	mov	r31, r0
			for (uint8_t x = 0; x < 64; x++) {
				flash_write_byte(address, receivedBuffer[x]);
     c60:	22 e1       	ldi	r18, 0x12	; 18
     c62:	32 e0       	ldi	r19, 0x02	; 2
     c64:	0a 81       	ldd	r16, Y+2	; 0x02
     c66:	1b 81       	ldd	r17, Y+3	; 0x03
     c68:	08 0d       	add	r16, r8
     c6a:	19 1d       	adc	r17, r9
     c6c:	3e 83       	std	Y+6, r19	; 0x06
     c6e:	2d 83       	std	Y+5, r18	; 0x05
     c70:	ed 81       	ldd	r30, Y+5	; 0x05
     c72:	fe 81       	ldd	r31, Y+6	; 0x06
     c74:	61 91       	ld	r22, Z+
     c76:	fe 83       	std	Y+6, r31	; 0x06
     c78:	ed 83       	std	Y+5, r30	; 0x05
     c7a:	cf 01       	movw	r24, r30
			gb_mode();
			
			usart_read_bytes(64);
			
			PORTB |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     c7c:	80 0f       	add	r24, r16
     c7e:	91 1f       	adc	r25, r17
     c80:	35 dc       	rcall	.-1942   	; 0x4ec <flash_write_byte>
     c82:	2d 81       	ldd	r18, Y+5	; 0x05
     c84:	3e 81       	ldd	r19, Y+6	; 0x06
     c86:	e2 16       	cp	r14, r18
     c88:	f3 06       	cpc	r15, r19
     c8a:	91 f7       	brne	.-28     	; 0xc70 <main+0x342>
     c8c:	30 e4       	ldi	r19, 0x40	; 64
				flash_write_byte(address, receivedBuffer[x]);
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     c8e:	83 0e       	add	r8, r19
     c90:	91 1c       	adc	r9, r1
     c92:	a1 1c       	adc	r10, r1
			
			PORTB &= ~(1<<ACTIVITY_LED);
     c94:	b1 1c       	adc	r11, r1
			gba_mode(); // Set back
     c96:	81 e3       	ldi	r24, 0x31	; 49
     c98:	4e da       	rcall	.-2916   	; 0x136 <USART_Transmit>
		}
		
		// Write 128 bytes to flash sector for Atmel flash (and increment)
		else if (receivedChar == GBA_FLASH_WRITE_ATMEL) {
     c9a:	2f 98       	cbi	0x05, 7	; 5
     c9c:	b2 da       	rcall	.-2716   	; 0x202 <gba_mode>
			gb_mode();
     c9e:	6d ce       	rjmp	.-806    	; 0x97a <main+0x4c>
			
			usart_read_bytes(128);
     ca0:	81 36       	cpi	r24, 0x61	; 97
     ca2:	89 f4       	brne	.+34     	; 0xcc6 <main+0x398>
     ca4:	81 da       	rcall	.-2814   	; 0x1a8 <gb_mode>
			
			PORTB |= (1<<ACTIVITY_LED);
     ca6:	80 e8       	ldi	r24, 0x80	; 128
			flash_write_sector(address); // Address used as sector number
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	4d da       	rcall	.-2918   	; 0x146 <usart_read_bytes>
			address++;
     cac:	2f 9a       	sbi	0x05, 7	; 5
     cae:	c4 01       	movw	r24, r8
     cb0:	39 dc       	rcall	.-1934   	; 0x524 <flash_write_sector>
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	88 1a       	sub	r8, r24
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     cb6:	98 0a       	sbc	r9, r24
     cb8:	a8 0a       	sbc	r10, r24
     cba:	b8 0a       	sbc	r11, r24
			
			PORTB &= ~(1<<ACTIVITY_LED);
     cbc:	81 e3       	ldi	r24, 0x31	; 49
			gba_mode(); // Set back
     cbe:	3b da       	rcall	.-2954   	; 0x136 <USART_Transmit>
     cc0:	2f 98       	cbi	0x05, 7	; 5
		}
		
		
		// ---------- EEPROM ----------
		// Set EEPROM size
		else if (receivedChar == GBA_SET_EEPROM_SIZE) {
     cc2:	9f da       	rcall	.-2754   	; 0x202 <gba_mode>
     cc4:	5a ce       	rjmp	.-844    	; 0x97a <main+0x4c>
			usart_read_chars(); // Read size
     cc6:	83 35       	cpi	r24, 0x53	; 83
     cc8:	51 f4       	brne	.+20     	; 0xcde <main+0x3b0>
			eepromSize = strtol(receivedBuffer, NULL, 16); // Convert size to dec
     cca:	5e da       	rcall	.-2884   	; 0x188 <usart_read_chars>
     ccc:	40 e1       	ldi	r20, 0x10	; 16
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	82 e1       	ldi	r24, 0x12	; 18
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	8b d5       	rcall	.+2838   	; 0x17f0 <strtol>
     cda:	6c 83       	std	Y+4, r22	; 0x04
		}
		
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
     cdc:	4e ce       	rjmp	.-868    	; 0x97a <main+0x4c>
			gba_eeprom_mode();
     cde:	85 36       	cpi	r24, 0x65	; 101
     ce0:	21 f5       	brne	.+72     	; 0xd2a <main+0x3fc>
			
			receivedChar = '1';
     ce2:	dd da       	rcall	.-2630   	; 0x29e <gba_eeprom_mode>
     ce4:	81 e3       	ldi	r24, 0x31	; 49
			while (receivedChar == '1') {
				PORTB |= (1<<ACTIVITY_LED);
     ce6:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
				gba_eeprom_read(address, eepromSize);
     cea:	2f 9a       	sbi	0x05, 7	; 5
     cec:	6c 81       	ldd	r22, Y+4	; 0x04
     cee:	c4 01       	movw	r24, r8
     cf0:	1c db       	rcall	.-2504   	; 0x32a <gba_eeprom_read>
     cf2:	e3 e1       	ldi	r30, 0x13	; 19
     cf4:	f3 e0       	ldi	r31, 0x03	; 3
     cf6:	fe 83       	std	Y+6, r31	; 0x06
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
					USART_Transmit(eepromBuffer[c]);
     cf8:	ed 83       	std	Y+5, r30	; 0x05
     cfa:	ed 81       	ldd	r30, Y+5	; 0x05
     cfc:	fe 81       	ldd	r31, Y+6	; 0x06
     cfe:	81 91       	ld	r24, Z+
     d00:	fe 83       	std	Y+6, r31	; 0x06
     d02:	ed 83       	std	Y+5, r30	; 0x05
     d04:	18 da       	rcall	.-3024   	; 0x136 <USART_Transmit>
			while (receivedChar == '1') {
				PORTB |= (1<<ACTIVITY_LED);
				gba_eeprom_read(address, eepromSize);
				
				// Send back the 8 bytes of data
				for (uint8_t c = 0; c < 8; c++) {
     d06:	2d 81       	ldd	r18, Y+5	; 0x05
     d08:	3e 81       	ldd	r19, Y+6	; 0x06
     d0a:	22 16       	cp	r2, r18
     d0c:	33 06       	cpc	r3, r19
					USART_Transmit(eepromBuffer[c]);
				}
				address++; // Increment to next 8 bytes
     d0e:	a9 f7       	brne	.-22     	; 0xcfa <main+0x3cc>
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	83 1a       	sub	r8, r19
     d14:	93 0a       	sbc	r9, r19
     d16:	a3 0a       	sbc	r10, r19
				
				PORTB &= ~(1<<ACTIVITY_LED);
     d18:	b3 0a       	sbc	r11, r19
				receivedChar = USART_Receive();
     d1a:	2f 98       	cbi	0x05, 7	; 5
     d1c:	04 da       	rcall	.-3064   	; 0x126 <USART_Receive>
     d1e:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
		// Read the EEPROM on address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_EEPROM) {
			gba_eeprom_mode();
			
			receivedChar = '1';
			while (receivedChar == '1') {
     d22:	81 33       	cpi	r24, 0x31	; 49
				
				PORTB &= ~(1<<ACTIVITY_LED);
				receivedChar = USART_Receive();
			}
			
			gba_mode(); // Set back
     d24:	11 f3       	breq	.-60     	; 0xcea <main+0x3bc>
		}
		
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
     d26:	6d da       	rcall	.-2854   	; 0x202 <gba_mode>
     d28:	28 ce       	rjmp	.-944    	; 0x97a <main+0x4c>
			gba_eeprom_mode();
     d2a:	80 37       	cpi	r24, 0x70	; 112
     d2c:	11 f5       	brne	.+68     	; 0xd72 <main+0x444>
     d2e:	b7 da       	rcall	.-2706   	; 0x29e <gba_eeprom_mode>
     d30:	83 e1       	ldi	r24, 0x13	; 19
     d32:	93 e0       	ldi	r25, 0x03	; 3
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
				eepromBuffer[x] = USART_Receive();
     d34:	9e 83       	std	Y+6, r25	; 0x06
     d36:	8d 83       	std	Y+5, r24	; 0x05
     d38:	f6 d9       	rcall	.-3092   	; 0x126 <USART_Receive>
     d3a:	ed 81       	ldd	r30, Y+5	; 0x05
     d3c:	fe 81       	ldd	r31, Y+6	; 0x06
     d3e:	81 93       	st	Z+, r24
		// Write 8 bytes to the EEPROM address (and increment)
		else if (receivedChar == GBA_WRITE_EEPROM) {
			gba_eeprom_mode();
			
			// Read 8 bytes from USART and place in buffer
			for (uint8_t x = 0; x < 8; x++) {
     d40:	fe 83       	std	Y+6, r31	; 0x06
     d42:	ed 83       	std	Y+5, r30	; 0x05
     d44:	2e 16       	cp	r2, r30
				eepromBuffer[x] = USART_Receive();
			}
			PORTB |= (1<<ACTIVITY_LED);
     d46:	3f 06       	cpc	r3, r31
			
			gba_eeprom_write(address, eepromSize);
     d48:	b9 f7       	brne	.-18     	; 0xd38 <main+0x40a>
     d4a:	2f 9a       	sbi	0x05, 7	; 5
     d4c:	6c 81       	ldd	r22, Y+4	; 0x04
     d4e:	c4 01       	movw	r24, r8
			address++;
     d50:	1d db       	rcall	.-2502   	; 0x38c <gba_eeprom_write>
     d52:	ff ef       	ldi	r31, 0xFF	; 255
     d54:	8f 1a       	sub	r8, r31
     d56:	9f 0a       	sbc	r9, r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d58:	af 0a       	sbc	r10, r31
     d5a:	bf 0a       	sbc	r11, r31
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	9c e7       	ldi	r25, 0x7C	; 124
     d60:	01 97       	sbiw	r24, 0x01	; 1
			
			_delay_ms(8); // Wait for EEPROM to write data (8ms)
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     d62:	f1 f7       	brne	.-4      	; 0xd60 <main+0x432>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <main+0x438>
			
			PORTB &= ~(1<<ACTIVITY_LED);
     d66:	00 00       	nop
			gba_mode(); // Set back
     d68:	81 e3       	ldi	r24, 0x31	; 49
     d6a:	e5 d9       	rcall	.-3126   	; 0x136 <USART_Transmit>
     d6c:	2f 98       	cbi	0x05, 7	; 5
		}
		
		
		// ---------- GB FLASH CARTS ----------
		// Select which pin need to pulse as WE (Audio or WR)
		else if (receivedChar == GB_FLASH_WE_PIN) {
     d6e:	49 da       	rcall	.-2926   	; 0x202 <gba_mode>
			flashWriteWePin = USART_Receive();
     d70:	04 ce       	rjmp	.-1016   	; 0x97a <main+0x4c>
     d72:	80 35       	cpi	r24, 0x50	; 80
     d74:	49 f4       	brne	.+18     	; 0xd88 <main+0x45a>
			
			if (flashWriteWePin == WE_AS_AUDIO_PIN) {
     d76:	d7 d9       	rcall	.-3154   	; 0x126 <USART_Receive>
     d78:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <flashWriteWePin>
				DDRG |= (1<<AUDIO_PIN); //CHNGED FROM E TO G
				audioPin_high;
     d7c:	81 34       	cpi	r24, 0x41	; 65
     d7e:	09 f0       	breq	.+2      	; 0xd82 <main+0x454>
			}
		}
		
		// Some flash carts may require changing the bank back to 1 in order to accept flash chip commands
		else if (receivedChar == GB_FLASH_BANK_1_COMMAND_WRITES) {
     d80:	fc cd       	rjmp	.-1032   	; 0x97a <main+0x4c>
			flashBank1CommandWrites = 1;
     d82:	9a 9a       	sbi	0x13, 2	; 19
     d84:	a2 9a       	sbi	0x14, 2	; 20
     d86:	f9 cd       	rjmp	.-1038   	; 0x97a <main+0x4c>
     d88:	8e 34       	cpi	r24, 0x4E	; 78
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
     d8a:	21 f4       	brne	.+8      	; 0xd94 <main+0x466>
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <flashBank1CommandWrites>
     d92:	f3 cd       	rjmp	.-1050   	; 0x97a <main+0x4c>
     d94:	85 34       	cpi	r24, 0x45	; 69
     d96:	61 f5       	brne	.+88     	; 0xdf0 <main+0x4c2>
     d98:	e4 e0       	ldi	r30, 0x04	; 4
			for (uint8_t x = 0; x < 3; x++) {
				usart_read_chars(); // Address
     d9a:	f2 e0       	ldi	r31, 0x02	; 2
     d9c:	00 e1       	ldi	r16, 0x10	; 16
				flashWriteCycle[x][0] = strtol(receivedBuffer, NULL, 16);
     d9e:	12 e0       	ldi	r17, 0x02	; 2
     da0:	fe 83       	std	Y+6, r31	; 0x06
     da2:	ed 83       	std	Y+5, r30	; 0x05
     da4:	f1 d9       	rcall	.-3102   	; 0x188 <usart_read_chars>
     da6:	40 e1       	ldi	r20, 0x10	; 16
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	82 e1       	ldi	r24, 0x12	; 18
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	1e d5       	rcall	.+2620   	; 0x17f0 <strtol>
     db4:	ed 81       	ldd	r30, Y+5	; 0x05
				USART_Transmit(SEND_ACK);
     db6:	fe 81       	ldd	r31, Y+6	; 0x06
     db8:	71 83       	std	Z+1, r23	; 0x01
     dba:	60 83       	st	Z, r22
				
				usart_read_chars(); // Data
     dbc:	81 e3       	ldi	r24, 0x31	; 49
				flashWriteCycle[x][1] = strtol(receivedBuffer, NULL, 16);
     dbe:	bb d9       	rcall	.-3210   	; 0x136 <USART_Transmit>
     dc0:	e3 d9       	rcall	.-3130   	; 0x188 <usart_read_chars>
     dc2:	40 e1       	ldi	r20, 0x10	; 16
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	82 e1       	ldi	r24, 0x12	; 18
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	10 d5       	rcall	.+2592   	; 0x17f0 <strtol>
     dd0:	ed 81       	ldd	r30, Y+5	; 0x05
     dd2:	fe 81       	ldd	r31, Y+6	; 0x06
     dd4:	73 83       	std	Z+3, r23	; 0x03
				USART_Transmit(SEND_ACK);
     dd6:	62 83       	std	Z+2, r22	; 0x02
     dd8:	81 e3       	ldi	r24, 0x31	; 49
     dda:	ad d9       	rcall	.-3238   	; 0x136 <USART_Transmit>
     ddc:	2d 81       	ldd	r18, Y+5	; 0x05
     dde:	3e 81       	ldd	r19, Y+6	; 0x06
     de0:	2c 5f       	subi	r18, 0xFC	; 252
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	3e 83       	std	Y+6, r19	; 0x06
     de6:	2d 83       	std	Y+5, r18	; 0x05
			flashBank1CommandWrites = 1;
		}
		
		// Load the program method to use
		else if (receivedChar == GB_FLASH_PROGRAM_METHOD) {
			for (uint8_t x = 0; x < 3; x++) {
     de8:	02 17       	cp	r16, r18
     dea:	13 07       	cpc	r17, r19
     dec:	d9 f6       	brne	.-74     	; 0xda4 <main+0x476>
     dee:	c5 cd       	rjmp	.-1142   	; 0x97a <main+0x4c>
				USART_Transmit(SEND_ACK);
			}
		}
		
		// Write address and one byte to Flash, pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_BYTE) {
     df0:	86 34       	cpi	r24, 0x46	; 70
     df2:	c9 f4       	brne	.+50     	; 0xe26 <main+0x4f8>
			usart_read_chars(); // Read address
     df4:	c9 d9       	rcall	.-3182   	; 0x188 <usart_read_chars>
     df6:	40 e1       	ldi	r20, 0x10	; 16
			uint16_t flashAddress = strtol(receivedBuffer, NULL, 16);
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	82 e1       	ldi	r24, 0x12	; 18
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	f6 d4       	rcall	.+2540   	; 0x17f0 <strtol>
     e04:	6b 01       	movw	r12, r22
     e06:	7c 01       	movw	r14, r24
     e08:	bf d9       	rcall	.-3202   	; 0x188 <usart_read_chars>
			
			usart_read_chars(); // Read data byte
     e0a:	40 e1       	ldi	r20, 0x10	; 16
     e0c:	50 e0       	ldi	r21, 0x00	; 0
			uint8_t flashByte = strtol(receivedBuffer, NULL, 16);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	82 e1       	ldi	r24, 0x12	; 18
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	ec d4       	rcall	.+2520   	; 0x17f0 <strtol>
     e18:	2f 9a       	sbi	0x05, 7	; 5
     e1a:	c6 01       	movw	r24, r12
			
			PORTB |= (1<<ACTIVITY_LED);
     e1c:	d3 db       	rcall	.-2138   	; 0x5c4 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(flashAddress, flashByte);
     e1e:	2f 98       	cbi	0x05, 7	; 5
     e20:	81 e3       	ldi	r24, 0x31	; 49
     e22:	89 d9       	rcall	.-3310   	; 0x136 <USART_Transmit>
			PORTB &= ~(1<<ACTIVITY_LED);
     e24:	aa cd       	rjmp	.-1196   	; 0x97a <main+0x4c>
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     e26:	84 35       	cpi	r24, 0x54	; 84
     e28:	09 f0       	breq	.+2      	; 0xe2c <main+0x4fe>
     e2a:	53 c0       	rjmp	.+166    	; 0xed2 <main+0x5a4>
		}
		
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
     e2c:	80 e4       	ldi	r24, 0x40	; 64
     e2e:	90 e0       	ldi	r25, 0x00	; 0
			usart_read_bytes(64);
     e30:	8a d9       	rcall	.-3308   	; 0x146 <usart_read_bytes>
     e32:	2f 9a       	sbi	0x05, 7	; 5
     e34:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <flashBank1CommandWrites>
			
			PORTB |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
     e38:	81 11       	cpse	r24, r1
     e3a:	24 c0       	rjmp	.+72     	; 0xe84 <main+0x556>
     e3c:	0f 2e       	mov	r0, r31
     e3e:	f2 e5       	ldi	r31, 0x52	; 82
     e40:	ef 2e       	mov	r14, r31
     e42:	f2 e0       	ldi	r31, 0x02	; 2
     e44:	ff 2e       	mov	r15, r31
     e46:	f0 2d       	mov	r31, r0
     e48:	82 e1       	ldi	r24, 0x12	; 18
     e4a:	92 e0       	ldi	r25, 0x02	; 2
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
						gb_flash_write_byte(address, receivedBuffer[x]);
     e4c:	0a 81       	ldd	r16, Y+2	; 0x02
     e4e:	1b 81       	ldd	r17, Y+3	; 0x03
     e50:	08 0d       	add	r16, r8
     e52:	19 1d       	adc	r17, r9
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
			usart_read_bytes(64);
			
			PORTB |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
     e58:	ed 81       	ldd	r30, Y+5	; 0x05
     e5a:	fe 81       	ldd	r31, Y+6	; 0x06
     e5c:	61 91       	ld	r22, Z+
     e5e:	fe 83       	std	Y+6, r31	; 0x06
     e60:	ed 83       	std	Y+5, r30	; 0x05
     e62:	6f 3f       	cpi	r22, 0xFF	; 255
     e64:	21 f0       	breq	.+8      	; 0xe6e <main+0x540>
						gb_flash_write_byte(address, receivedBuffer[x]);
     e66:	cf 01       	movw	r24, r30
     e68:	80 0f       	add	r24, r16
     e6a:	91 1f       	adc	r25, r17
     e6c:	d8 db       	rcall	.-2128   	; 0x61e <gb_flash_write_byte>
     e6e:	2d 81       	ldd	r18, Y+5	; 0x05
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTB |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
				for (uint8_t x = 0; x < 64; x++) {
     e70:	3e 81       	ldd	r19, Y+6	; 0x06
     e72:	e2 16       	cp	r14, r18
     e74:	f3 06       	cpc	r15, r19
     e76:	81 f7       	brne	.-32     	; 0xe58 <main+0x52a>
     e78:	30 e4       	ldi	r19, 0x40	; 64
     e7a:	83 0e       	add	r8, r19
     e7c:	91 1c       	adc	r9, r1
     e7e:	a1 1c       	adc	r10, r1
     e80:	b1 1c       	adc	r11, r1
     e82:	23 c0       	rjmp	.+70     	; 0xeca <main+0x59c>
     e84:	0f 2e       	mov	r0, r31
     e86:	f2 e5       	ldi	r31, 0x52	; 82
     e88:	ef 2e       	mov	r14, r31
     e8a:	f2 e0       	ldi	r31, 0x02	; 2
     e8c:	ff 2e       	mov	r15, r31
		// Write 64 bytes to Flash address one byte write at a time (and increment), pulse a pin
		else if (receivedChar == GB_FLASH_WRITE_64BYTE) {
			usart_read_bytes(64);
			
			PORTB |= (1<<ACTIVITY_LED);
			if (flashBank1CommandWrites == 0) {
     e8e:	f0 2d       	mov	r31, r0
     e90:	82 e1       	ldi	r24, 0x12	; 18
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
						gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	0a 81       	ldd	r16, Y+2	; 0x02
     e96:	1b 81       	ldd	r17, Y+3	; 0x03
     e98:	08 0d       	add	r16, r8
     e9a:	19 1d       	adc	r17, r9
     e9c:	9e 83       	std	Y+6, r25	; 0x06
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
					if (receivedBuffer[x] != 0xFF) {
     e9e:	8d 83       	std	Y+5, r24	; 0x05
     ea0:	ed 81       	ldd	r30, Y+5	; 0x05
     ea2:	fe 81       	ldd	r31, Y+6	; 0x06
     ea4:	61 91       	ld	r22, Z+
     ea6:	fe 83       	std	Y+6, r31	; 0x06
     ea8:	ed 83       	std	Y+5, r30	; 0x05
						gb_flash_write_byte_bank1_commands(address, receivedBuffer[x]);
     eaa:	6f 3f       	cpi	r22, 0xFF	; 255
     eac:	21 f0       	breq	.+8      	; 0xeb6 <main+0x588>
     eae:	cf 01       	movw	r24, r30
     eb0:	80 0f       	add	r24, r16
     eb2:	91 1f       	adc	r25, r17
					}
					address++;
				}
			}
			else { // Some flash carts need to change to bank 1 to issue flash commands
				for (uint8_t x = 0; x < 64; x++) {
     eb4:	2b dc       	rcall	.-1962   	; 0x70c <gb_flash_write_byte_bank1_commands>
     eb6:	2d 81       	ldd	r18, Y+5	; 0x05
     eb8:	3e 81       	ldd	r19, Y+6	; 0x06
     eba:	e2 16       	cp	r14, r18
     ebc:	f3 06       	cpc	r15, r19
     ebe:	81 f7       	brne	.-32     	; 0xea0 <main+0x572>
     ec0:	30 e4       	ldi	r19, 0x40	; 64
     ec2:	83 0e       	add	r8, r19
     ec4:	91 1c       	adc	r9, r1
     ec6:	a1 1c       	adc	r10, r1
					}
					address++;
				}
			}
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     ec8:	b1 1c       	adc	r11, r1
     eca:	81 e3       	ldi	r24, 0x31	; 49
     ecc:	34 d9       	rcall	.-3480   	; 0x136 <USART_Transmit>
			PORTB &= ~(1<<ACTIVITY_LED);
     ece:	2f 98       	cbi	0x05, 7	; 5
     ed0:	54 cd       	rjmp	.-1368   	; 0x97a <main+0x4c>
		}
		
		// Buffered programming, write 32 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_BUFFERED_32BYTE) {
     ed2:	89 35       	cpi	r24, 0x59	; 89
     ed4:	09 f0       	breq	.+2      	; 0xed8 <main+0x5aa>
     ed6:	67 c0       	rjmp	.+206    	; 0xfa6 <main+0x678>
			usart_read_bytes(32);
     ed8:	80 e2       	ldi	r24, 0x20	; 32
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	34 d9       	rcall	.-3480   	; 0x146 <usart_read_bytes>
			PORTB |= (1<<ACTIVITY_LED);
     ede:	2f 9a       	sbi	0x05, 7	; 5
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xAA);
     ee0:	6a ea       	ldi	r22, 0xAA	; 170
     ee2:	8a ea       	ldi	r24, 0xAA	; 170
     ee4:	9a e0       	ldi	r25, 0x0A	; 10
     ee6:	6e db       	rcall	.-2340   	; 0x5c4 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x555, 0x55);
     ee8:	65 e5       	ldi	r22, 0x55	; 85
     eea:	85 e5       	ldi	r24, 0x55	; 85
     eec:	95 e0       	ldi	r25, 0x05	; 5
     eee:	6a db       	rcall	.-2348   	; 0x5c4 <gb_flash_write_bus_cycle>
     ef0:	9e 82       	std	Y+6, r9	; 0x06
			gb_flash_write_bus_cycle(address, 0x25);
     ef2:	8d 82       	std	Y+5, r8	; 0x05
     ef4:	65 e2       	ldi	r22, 0x25	; 37
     ef6:	c4 01       	movw	r24, r8
     ef8:	65 db       	rcall	.-2358   	; 0x5c4 <gb_flash_write_bus_cycle>
     efa:	6f e1       	ldi	r22, 0x1F	; 31
     efc:	c4 01       	movw	r24, r8
			gb_flash_write_bus_cycle(address, 0x1F); // Length
     efe:	62 db       	rcall	.-2364   	; 0x5c4 <gb_flash_write_bus_cycle>
     f00:	85 e0       	ldi	r24, 0x05	; 5
     f02:	8a 95       	dec	r24
     f04:	f1 f7       	brne	.-4      	; 0xf02 <main+0x5d4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f06:	00 00       	nop
     f08:	0f 2e       	mov	r0, r31
     f0a:	f2 e3       	ldi	r31, 0x32	; 50
     f0c:	ef 2e       	mov	r14, r31
     f0e:	f2 e0       	ldi	r31, 0x02	; 2
     f10:	ff 2e       	mov	r15, r31
     f12:	f0 2d       	mov	r31, r0
     f14:	02 e1       	ldi	r16, 0x12	; 18
     f16:	12 e0       	ldi	r17, 0x02	; 2
     f18:	ed 81       	ldd	r30, Y+5	; 0x05
     f1a:	fe 81       	ldd	r31, Y+6	; 0x06
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
     f1c:	2a 81       	ldd	r18, Y+2	; 0x02
     f1e:	3b 81       	ldd	r19, Y+3	; 0x03
     f20:	e2 0f       	add	r30, r18
     f22:	f3 1f       	adc	r31, r19
     f24:	fe 83       	std	Y+6, r31	; 0x06
     f26:	ed 83       	std	Y+5, r30	; 0x05
     f28:	f8 01       	movw	r30, r16
     f2a:	61 91       	ld	r22, Z+
     f2c:	8f 01       	movw	r16, r30
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	9e 81       	ldd	r25, Y+6	; 0x06
     f32:	8e 0f       	add	r24, r30
     f34:	9f 1f       	adc	r25, r31
     f36:	46 db       	rcall	.-2420   	; 0x5c4 <gb_flash_write_bus_cycle>
     f38:	e0 16       	cp	r14, r16
     f3a:	f1 06       	cpc	r15, r17
			gb_flash_write_bus_cycle(address, 0x25);
			gb_flash_write_bus_cycle(address, 0x1F); // Length
			_delay_us(1);
			
			// Write data
			for (uint8_t x = 0; x < 32; x++) {
     f3c:	a9 f7       	brne	.-22     	; 0xf28 <main+0x5fa>
     f3e:	f0 e2       	ldi	r31, 0x20	; 32
     f40:	8f 0e       	add	r8, r31
     f42:	91 1c       	adc	r9, r1
     f44:	a1 1c       	adc	r10, r1
     f46:	b1 1c       	adc	r11, r1
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-32, 0x29);
     f48:	c4 01       	movw	r24, r8
     f4a:	80 97       	sbiw	r24, 0x20	; 32
     f4c:	69 e2       	ldi	r22, 0x29	; 41
     f4e:	3a db       	rcall	.-2444   	; 0x5c4 <gb_flash_write_bus_cycle>
     f50:	8f e1       	ldi	r24, 0x1F	; 31
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <main+0x626>
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <main+0x62c>
     f5a:	00 00       	nop
     f5c:	84 01       	movw	r16, r8
     f5e:	01 50       	subi	r16, 0x01	; 1
     f60:	11 09       	sbc	r17, r1
     f62:	c8 01       	movw	r24, r16
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
     f64:	20 db       	rcall	.-2496   	; 0x5a6 <gb_flash_read_byte>
     f66:	98 ec       	ldi	r25, 0xC8	; 200
     f68:	9d 83       	std	Y+5, r25	; 0x05
				dataVerify = gb_flash_read_byte(address-1);
     f6a:	15 c0       	rjmp	.+42     	; 0xf96 <main+0x668>
     f6c:	c8 01       	movw	r24, r16
     f6e:	1b db       	rcall	.-2506   	; 0x5a6 <gb_flash_read_byte>
     f70:	ea e1       	ldi	r30, 0x1A	; 26
     f72:	ea 95       	dec	r30
     f74:	f1 f7       	brne	.-4      	; 0xf72 <main+0x644>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <main+0x64a>
     f78:	fd 81       	ldd	r31, Y+5	; 0x05
     f7a:	f1 50       	subi	r31, 0x01	; 1
     f7c:	fd 83       	std	Y+5, r31	; 0x05
				_delay_us(5);
				verifyCount++;
				if (verifyCount >= 200) {
     f7e:	f1 11       	cpse	r31, r1
     f80:	0a c0       	rjmp	.+20     	; 0xf96 <main+0x668>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f82:	2f ef       	ldi	r18, 0xFF	; 255
     f84:	39 e6       	ldi	r19, 0x69	; 105
     f86:	88 e1       	ldi	r24, 0x18	; 24
     f88:	21 50       	subi	r18, 0x01	; 1
     f8a:	30 40       	sbci	r19, 0x00	; 0
     f8c:	80 40       	sbci	r24, 0x00	; 0
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <main+0x65a>
     f90:	00 c0       	rjmp	.+0      	; 0xf92 <main+0x664>
     f92:	00 00       	nop
			_delay_us(200);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
			uint8_t verifyCount = 0;
			while (dataVerify != receivedBuffer[31]) {
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <main+0x670>
     f96:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <receivedBuffer+0x1f>
     f9a:	89 13       	cpse	r24, r25
					_delay_ms(500);
					break;
				}
			}
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     f9c:	e7 cf       	rjmp	.-50     	; 0xf6c <main+0x63e>
     f9e:	81 e3       	ldi	r24, 0x31	; 49
     fa0:	ca d8       	rcall	.-3692   	; 0x136 <USART_Transmit>
			PORTB &= ~(1<<ACTIVITY_LED);
     fa2:	2f 98       	cbi	0x05, 7	; 5
		}
		
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
     fa4:	ea cc       	rjmp	.-1580   	; 0x97a <main+0x4c>
     fa6:	8a 34       	cpi	r24, 0x4A	; 74
			usart_read_bytes(64);
     fa8:	59 f5       	brne	.+86     	; 0x1000 <main+0x6d2>
     faa:	80 e4       	ldi	r24, 0x40	; 64
     fac:	90 e0       	ldi	r25, 0x00	; 0
			
			PORTB |= (1<<ACTIVITY_LED);
     fae:	cb d8       	rcall	.-3690   	; 0x146 <usart_read_bytes>
     fb0:	2f 9a       	sbi	0x05, 7	; 5
     fb2:	0f 2e       	mov	r0, r31
     fb4:	f2 e5       	ldi	r31, 0x52	; 82
     fb6:	ef 2e       	mov	r14, r31
     fb8:	f2 e0       	ldi	r31, 0x02	; 2
     fba:	ff 2e       	mov	r15, r31
     fbc:	f0 2d       	mov	r31, r0
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedBuffer[x] != 0xFF) {
					gb_flash_write_byte_special(address, receivedBuffer[x]);
     fbe:	e2 e1       	ldi	r30, 0x12	; 18
     fc0:	f2 e0       	ldi	r31, 0x02	; 2
     fc2:	0a 81       	ldd	r16, Y+2	; 0x02
     fc4:	1b 81       	ldd	r17, Y+3	; 0x03
     fc6:	08 0d       	add	r16, r8
     fc8:	19 1d       	adc	r17, r9
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
			usart_read_bytes(64);
			
			PORTB |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
				if (receivedBuffer[x] != 0xFF) {
     fca:	fe 83       	std	Y+6, r31	; 0x06
     fcc:	ed 83       	std	Y+5, r30	; 0x05
     fce:	ed 81       	ldd	r30, Y+5	; 0x05
     fd0:	fe 81       	ldd	r31, Y+6	; 0x06
     fd2:	61 91       	ld	r22, Z+
     fd4:	fe 83       	std	Y+6, r31	; 0x06
					gb_flash_write_byte_special(address, receivedBuffer[x]);
     fd6:	ed 83       	std	Y+5, r30	; 0x05
     fd8:	6f 3f       	cpi	r22, 0xFF	; 255
     fda:	21 f0       	breq	.+8      	; 0xfe4 <main+0x6b6>
     fdc:	cf 01       	movw	r24, r30
		// Write 64 bytes to Flash address one byte write at a time, increment and pulse the reset pin after, keep setting bank after bank 1
		else if (receivedChar == GB_FLASH_WRITE_64BYTE_PULSE_RESET) {
			usart_read_bytes(64);
			
			PORTB |= (1<<ACTIVITY_LED);
			for (uint8_t x = 0; x < 64; x++) {
     fde:	80 0f       	add	r24, r16
     fe0:	91 1f       	adc	r25, r17
     fe2:	50 db       	rcall	.-2400   	; 0x684 <gb_flash_write_byte_special>
     fe4:	2d 81       	ldd	r18, Y+5	; 0x05
     fe6:	3e 81       	ldd	r19, Y+6	; 0x06
     fe8:	e2 16       	cp	r14, r18
     fea:	f3 06       	cpc	r15, r19
     fec:	81 f7       	brne	.-32     	; 0xfce <main+0x6a0>
					gb_flash_write_byte_special(address, receivedBuffer[x]);
				}
				address++;
			}
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
     fee:	30 e4       	ldi	r19, 0x40	; 64
     ff0:	83 0e       	add	r8, r19
			PORTB &= ~(1<<ACTIVITY_LED);
     ff2:	91 1c       	adc	r9, r1
     ff4:	a1 1c       	adc	r10, r1
		}
		
		// Buffered programming, write 256 bytes to Flash address
		else if (receivedChar == GB_FLASH_WRITE_256BYTE) {
     ff6:	b1 1c       	adc	r11, r1
     ff8:	81 e3       	ldi	r24, 0x31	; 49
			usart_read_bytes(256);
     ffa:	9d d8       	rcall	.-3782   	; 0x136 <USART_Transmit>
     ffc:	2f 98       	cbi	0x05, 7	; 5
     ffe:	bd cc       	rjmp	.-1670   	; 0x97a <main+0x4c>
    1000:	88 35       	cpi	r24, 0x58	; 88
			PORTB |= (1<<ACTIVITY_LED);
    1002:	09 f0       	breq	.+2      	; 0x1006 <main+0x6d8>
			
			// Setup buffered write
			gb_flash_write_bus_cycle(0xAAA, 0xA9);
    1004:	57 c0       	rjmp	.+174    	; 0x10b4 <main+0x786>
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	9d d8       	rcall	.-3782   	; 0x146 <usart_read_bytes>
			gb_flash_write_bus_cycle(0x555, 0x56);
    100c:	2f 9a       	sbi	0x05, 7	; 5
    100e:	69 ea       	ldi	r22, 0xA9	; 169
    1010:	8a ea       	ldi	r24, 0xAA	; 170
    1012:	9a e0       	ldi	r25, 0x0A	; 10
    1014:	d7 da       	rcall	.-2642   	; 0x5c4 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0x26);
    1016:	66 e5       	ldi	r22, 0x56	; 86
    1018:	85 e5       	ldi	r24, 0x55	; 85
    101a:	95 e0       	ldi	r25, 0x05	; 5
    101c:	d3 da       	rcall	.-2650   	; 0x5c4 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(address, 0xFF); // Length
    101e:	84 01       	movw	r16, r8
    1020:	66 e2       	ldi	r22, 0x26	; 38
    1022:	c4 01       	movw	r24, r8
    1024:	cf da       	rcall	.-2658   	; 0x5c4 <gb_flash_write_bus_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1026:	6f ef       	ldi	r22, 0xFF	; 255
    1028:	c4 01       	movw	r24, r8
    102a:	cc da       	rcall	.-2664   	; 0x5c4 <gb_flash_write_bus_cycle>
    102c:	87 ec       	ldi	r24, 0xC7	; 199
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <main+0x702>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <main+0x708>
    1036:	00 00       	nop
    1038:	0f 2e       	mov	r0, r31
    103a:	f2 e1       	ldi	r31, 0x12	; 18
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
    103c:	ef 2e       	mov	r14, r31
    103e:	f3 e0       	ldi	r31, 0x03	; 3
    1040:	ff 2e       	mov	r15, r31
    1042:	f0 2d       	mov	r31, r0
    1044:	e2 e1       	ldi	r30, 0x12	; 18
    1046:	f2 e0       	ldi	r31, 0x02	; 2
    1048:	2a 81       	ldd	r18, Y+2	; 0x02
    104a:	3b 81       	ldd	r19, Y+3	; 0x03
    104c:	02 0f       	add	r16, r18
    104e:	13 1f       	adc	r17, r19
    1050:	fe 83       	std	Y+6, r31	; 0x06
    1052:	ed 83       	std	Y+5, r30	; 0x05
    1054:	ed 81       	ldd	r30, Y+5	; 0x05
    1056:	fe 81       	ldd	r31, Y+6	; 0x06
			gb_flash_write_bus_cycle(address, 0x26);
			gb_flash_write_bus_cycle(address, 0xFF); // Length
			_delay_us(50);
			
			// Write data
			for (int x = 0; x < 256; x++) {
    1058:	61 91       	ld	r22, Z+
    105a:	fe 83       	std	Y+6, r31	; 0x06
    105c:	ed 83       	std	Y+5, r30	; 0x05
    105e:	cf 01       	movw	r24, r30
    1060:	80 0f       	add	r24, r16
    1062:	91 1f       	adc	r25, r17
    1064:	af da       	rcall	.-2722   	; 0x5c4 <gb_flash_write_bus_cycle>
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
				address++;
			}
			
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
    1066:	2d 81       	ldd	r18, Y+5	; 0x05
    1068:	3e 81       	ldd	r19, Y+6	; 0x06
    106a:	e2 16       	cp	r14, r18
    106c:	f3 06       	cpc	r15, r19
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
    106e:	91 f7       	brne	.-28     	; 0x1054 <main+0x726>
    1070:	3f ef       	ldi	r19, 0xFF	; 255
    1072:	93 1a       	sub	r9, r19
    1074:	a3 0a       	sbc	r10, r19
    1076:	b3 0a       	sbc	r11, r19
			while (dataVerify != receivedBuffer[255]) {
    1078:	c4 01       	movw	r24, r8
    107a:	9a 95       	dec	r25
    107c:	6a e2       	ldi	r22, 0x2A	; 42
    107e:	a2 da       	rcall	.-2748   	; 0x5c4 <gb_flash_write_bus_cycle>
				dataVerify = gb_flash_read_byte(address-1);
    1080:	c4 01       	movw	r24, r8
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
    1088:	8e da       	rcall	.-2788   	; 0x5a6 <gb_flash_read_byte>
    108a:	e1 e1       	ldi	r30, 0x11	; 17
			// Write buffer to flash
			gb_flash_write_bus_cycle(address-256, 0x2A);
			
			// Verify last byte written
			uint8_t dataVerify = gb_flash_read_byte(address-1);
			while (dataVerify != receivedBuffer[255]) {
    108c:	f3 e0       	ldi	r31, 0x03	; 3
    108e:	90 81       	ld	r25, Z
    1090:	89 17       	cp	r24, r25
    1092:	61 f0       	breq	.+24     	; 0x10ac <main+0x77e>
				dataVerify = gb_flash_read_byte(address-1);
				_delay_us(5);
			}
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	86 da       	rcall	.-2804   	; 0x5a6 <gb_flash_read_byte>
			PORTB &= ~(1<<ACTIVITY_LED);
    109a:	3a e1       	ldi	r19, 0x1A	; 26
    109c:	3a 95       	dec	r19
		}
		
		// Nintendo Power 1MB Cart, Write 128 bytes to flash
		else if (receivedChar == GB_FLASH_WRITE_NP_128BYTE) {
    109e:	f1 f7       	brne	.-4      	; 0x109c <main+0x76e>
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <main+0x774>
			usart_read_bytes(128);
    10a2:	e1 e1       	ldi	r30, 0x11	; 17
    10a4:	f3 e0       	ldi	r31, 0x03	; 3
    10a6:	90 81       	ld	r25, Z
    10a8:	98 13       	cpse	r25, r24
			PORTB |= (1<<ACTIVITY_LED);
    10aa:	f4 cf       	rjmp	.-24     	; 0x1094 <main+0x766>
			
			// Enable flash chip access
			gb_flash_write_bus_cycle(0x120, 0x09);
    10ac:	81 e3       	ldi	r24, 0x31	; 49
    10ae:	43 d8       	rcall	.-3962   	; 0x136 <USART_Transmit>
    10b0:	2f 98       	cbi	0x05, 7	; 5
    10b2:	63 cc       	rjmp	.-1850   	; 0x97a <main+0x4c>
			gb_flash_write_bus_cycle(0x121, 0xaa);
    10b4:	8a 35       	cpi	r24, 0x5A	; 90
    10b6:	09 f0       	breq	.+2      	; 0x10ba <main+0x78c>
    10b8:	c4 c0       	rjmp	.+392    	; 0x1242 <main+0x914>
    10ba:	80 e8       	ldi	r24, 0x80	; 128
			gb_flash_write_bus_cycle(0x122, 0x55);
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	43 d8       	rcall	.-3962   	; 0x146 <usart_read_bytes>
    10c0:	2f 9a       	sbi	0x05, 7	; 5
    10c2:	69 e0       	ldi	r22, 0x09	; 9
    10c4:	80 e2       	ldi	r24, 0x20	; 32
			gb_flash_write_bus_cycle(0x13f, 0xa5);
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	7d da       	rcall	.-2822   	; 0x5c4 <gb_flash_write_bus_cycle>
    10ca:	6a ea       	ldi	r22, 0xAA	; 170
    10cc:	81 e2       	ldi	r24, 0x21	; 33
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	79 da       	rcall	.-2830   	; 0x5c4 <gb_flash_write_bus_cycle>
    10d2:	65 e5       	ldi	r22, 0x55	; 85
    10d4:	82 e2       	ldi	r24, 0x22	; 34
			_delay_us(5);
			
			// Re-Enable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x11);
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	75 da       	rcall	.-2838   	; 0x5c4 <gb_flash_write_bus_cycle>
    10da:	65 ea       	ldi	r22, 0xA5	; 165
    10dc:	8f e3       	ldi	r24, 0x3F	; 63
    10de:	91 e0       	ldi	r25, 0x01	; 1
			gb_flash_write_bus_cycle(0x13f, 0xa5);
    10e0:	71 da       	rcall	.-2846   	; 0x5c4 <gb_flash_write_bus_cycle>
    10e2:	fa e1       	ldi	r31, 0x1A	; 26
    10e4:	fa 95       	dec	r31
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <main+0x7b6>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <main+0x7bc>
    10ea:	61 e1       	ldi	r22, 0x11	; 17
    10ec:	80 e2       	ldi	r24, 0x20	; 32
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	69 da       	rcall	.-2862   	; 0x5c4 <gb_flash_write_bus_cycle>
			_delay_us(5);
			
			// Bank 1 for commands
			gb_flash_write_bus_cycle(0x2100, 0x01);
    10f2:	65 ea       	ldi	r22, 0xA5	; 165
    10f4:	8f e3       	ldi	r24, 0x3F	; 63
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	65 da       	rcall	.-2870   	; 0x5c4 <gb_flash_write_bus_cycle>
    10fa:	2a e1       	ldi	r18, 0x1A	; 26
    10fc:	2a 95       	dec	r18
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <main+0x7ce>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <main+0x7d4>
			_delay_us(5);
			
			
			// Write setup
			gb_flash_write_bus_cycle(0x120, 0x0F);
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	91 e2       	ldi	r25, 0x21	; 33
    1108:	5d da       	rcall	.-2886   	; 0x5c4 <gb_flash_write_bus_cycle>
    110a:	3a e1       	ldi	r19, 0x1A	; 26
			gb_flash_write_bus_cycle(0x125, 0x55);
    110c:	3a 95       	dec	r19
    110e:	f1 f7       	brne	.-4      	; 0x110c <main+0x7de>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <main+0x7e4>
    1112:	6f e0       	ldi	r22, 0x0F	; 15
    1114:	80 e2       	ldi	r24, 0x20	; 32
			gb_flash_write_bus_cycle(0x126, 0x55);
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	55 da       	rcall	.-2902   	; 0x5c4 <gb_flash_write_bus_cycle>
    111a:	65 e5       	ldi	r22, 0x55	; 85
    111c:	85 e2       	ldi	r24, 0x25	; 37
			gb_flash_write_bus_cycle(0x127, 0xAA);
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	51 da       	rcall	.-2910   	; 0x5c4 <gb_flash_write_bus_cycle>
    1122:	65 e5       	ldi	r22, 0x55	; 85
    1124:	86 e2       	ldi	r24, 0x26	; 38
    1126:	91 e0       	ldi	r25, 0x01	; 1
			gb_flash_write_bus_cycle(0x13f, 0xA5);
    1128:	4d da       	rcall	.-2918   	; 0x5c4 <gb_flash_write_bus_cycle>
    112a:	6a ea       	ldi	r22, 0xAA	; 170
    112c:	87 e2       	ldi	r24, 0x27	; 39
    112e:	91 e0       	ldi	r25, 0x01	; 1
    1130:	49 da       	rcall	.-2926   	; 0x5c4 <gb_flash_write_bus_cycle>
    1132:	65 ea       	ldi	r22, 0xA5	; 165
    1134:	8f e3       	ldi	r24, 0x3F	; 63
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	45 da       	rcall	.-2934   	; 0x5c4 <gb_flash_write_bus_cycle>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
    113a:	8a e1       	ldi	r24, 0x1A	; 26
    113c:	8a 95       	dec	r24
    113e:	f1 f7       	brne	.-4      	; 0x113c <main+0x80e>
    1140:	00 c0       	rjmp	.+0      	; 0x1142 <main+0x814>
			gb_flash_write_bus_cycle(0x125, 0x2A);
    1142:	6f e0       	ldi	r22, 0x0F	; 15
    1144:	80 e2       	ldi	r24, 0x20	; 32
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	3d da       	rcall	.-2950   	; 0x5c4 <gb_flash_write_bus_cycle>
    114a:	6a e2       	ldi	r22, 0x2A	; 42
			gb_flash_write_bus_cycle(0x126, 0xAA);
    114c:	85 e2       	ldi	r24, 0x25	; 37
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	39 da       	rcall	.-2958   	; 0x5c4 <gb_flash_write_bus_cycle>
    1152:	6a ea       	ldi	r22, 0xAA	; 170
    1154:	86 e2       	ldi	r24, 0x26	; 38
			gb_flash_write_bus_cycle(0x127, 0x55);
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	35 da       	rcall	.-2966   	; 0x5c4 <gb_flash_write_bus_cycle>
    115a:	65 e5       	ldi	r22, 0x55	; 85
    115c:	87 e2       	ldi	r24, 0x27	; 39
    115e:	91 e0       	ldi	r25, 0x01	; 1
			gb_flash_write_bus_cycle(0x13f, 0xA5);
    1160:	31 da       	rcall	.-2974   	; 0x5c4 <gb_flash_write_bus_cycle>
    1162:	65 ea       	ldi	r22, 0xA5	; 165
    1164:	8f e3       	ldi	r24, 0x3F	; 63
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	2d da       	rcall	.-2982   	; 0x5c4 <gb_flash_write_bus_cycle>
    116a:	9a e1       	ldi	r25, 0x1A	; 26
    116c:	9a 95       	dec	r25
    116e:	f1 f7       	brne	.-4      	; 0x116c <main+0x83e>
			_delay_us(5);
			
			gb_flash_write_bus_cycle(0x120, 0x0F);
    1170:	00 c0       	rjmp	.+0      	; 0x1172 <main+0x844>
    1172:	6f e0       	ldi	r22, 0x0F	; 15
    1174:	80 e2       	ldi	r24, 0x20	; 32
    1176:	91 e0       	ldi	r25, 0x01	; 1
			gb_flash_write_bus_cycle(0x125, 0x55);
    1178:	25 da       	rcall	.-2998   	; 0x5c4 <gb_flash_write_bus_cycle>
    117a:	65 e5       	ldi	r22, 0x55	; 85
    117c:	85 e2       	ldi	r24, 0x25	; 37
    117e:	91 e0       	ldi	r25, 0x01	; 1
    1180:	21 da       	rcall	.-3006   	; 0x5c4 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x126, 0x55);
    1182:	65 e5       	ldi	r22, 0x55	; 85
    1184:	86 e2       	ldi	r24, 0x26	; 38
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	1d da       	rcall	.-3014   	; 0x5c4 <gb_flash_write_bus_cycle>
    118a:	60 ea       	ldi	r22, 0xA0	; 160
			gb_flash_write_bus_cycle(0x127, 0xA0);
    118c:	87 e2       	ldi	r24, 0x27	; 39
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	19 da       	rcall	.-3022   	; 0x5c4 <gb_flash_write_bus_cycle>
    1192:	65 ea       	ldi	r22, 0xA5	; 165
    1194:	8f e3       	ldi	r24, 0x3F	; 63
			gb_flash_write_bus_cycle(0x13f, 0xA5);
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	15 da       	rcall	.-3030   	; 0x5c4 <gb_flash_write_bus_cycle>
    119a:	ea e1       	ldi	r30, 0x1A	; 26
    119c:	ea 95       	dec	r30
    119e:	f1 f7       	brne	.-4      	; 0x119c <main+0x86e>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <main+0x874>
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <__data_end>
			_delay_us(5);
			
			// Set bank back
			write_8bit_data(0x2100, lastBankAccessed, BANK_WRITE);
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	91 e2       	ldi	r25, 0x21	; 33
    11ac:	14 d8       	rcall	.-4056   	; 0x1d6 <write_8bit_data>
    11ae:	fa e1       	ldi	r31, 0x1A	; 26
    11b0:	fa 95       	dec	r31
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <main+0x882>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <main+0x888>
    11b6:	60 e1       	ldi	r22, 0x10	; 16
    11b8:	80 e2       	ldi	r24, 0x20	; 32
    11ba:	91 e0       	ldi	r25, 0x01	; 1
			_delay_us(5);
			
			// Disable writes to MBC registers
			gb_flash_write_bus_cycle(0x120, 0x10);
    11bc:	03 da       	rcall	.-3066   	; 0x5c4 <gb_flash_write_bus_cycle>
    11be:	65 ea       	ldi	r22, 0xA5	; 165
    11c0:	8f e3       	ldi	r24, 0x3F	; 63
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	ff d9       	rcall	.-3074   	; 0x5c4 <gb_flash_write_bus_cycle>
			gb_flash_write_bus_cycle(0x13f, 0xa5);
    11c6:	2a e1       	ldi	r18, 0x1A	; 26
    11c8:	2a 95       	dec	r18
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <main+0x89a>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <main+0x8a0>
    11ce:	68 e0       	ldi	r22, 0x08	; 8
    11d0:	80 e2       	ldi	r24, 0x20	; 32
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	f7 d9       	rcall	.-3090   	; 0x5c4 <gb_flash_write_bus_cycle>
    11d6:	65 ea       	ldi	r22, 0xA5	; 165
			_delay_us(5);
			
			// Undo Wakeup
			gb_flash_write_bus_cycle(0x120, 0x08);
    11d8:	8f e3       	ldi	r24, 0x3F	; 63
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	f3 d9       	rcall	.-3098   	; 0x5c4 <gb_flash_write_bus_cycle>
    11de:	3a e1       	ldi	r19, 0x1A	; 26
    11e0:	3a 95       	dec	r19
			gb_flash_write_bus_cycle(0x13f, 0xa5);
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <main+0x8b2>
    11e4:	00 c0       	rjmp	.+0      	; 0x11e6 <main+0x8b8>
    11e6:	82 e1       	ldi	r24, 0x12	; 18
    11e8:	92 e0       	ldi	r25, 0x02	; 2
    11ea:	0f 2e       	mov	r0, r31
    11ec:	f2 e9       	ldi	r31, 0x92	; 146
    11ee:	ef 2e       	mov	r14, r31
    11f0:	f2 e0       	ldi	r31, 0x02	; 2
    11f2:	ff 2e       	mov	r15, r31
    11f4:	f0 2d       	mov	r31, r0
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	ed 81       	ldd	r30, Y+5	; 0x05
    11fc:	fe 81       	ldd	r31, Y+6	; 0x06
    11fe:	61 91       	ld	r22, Z+
    1200:	fe 83       	std	Y+6, r31	; 0x06
    1202:	ed 83       	std	Y+5, r30	; 0x05
    1204:	84 01       	movw	r16, r8
    1206:	c4 01       	movw	r24, r8
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
				gb_flash_write_bus_cycle(address, receivedBuffer[x]);
    1208:	dd d9       	rcall	.-3142   	; 0x5c4 <gb_flash_write_bus_cycle>
    120a:	fa e1       	ldi	r31, 0x1A	; 26
    120c:	fa 95       	dec	r31
    120e:	f1 f7       	brne	.-4      	; 0x120c <main+0x8de>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <main+0x8e4>
    1212:	2f ef       	ldi	r18, 0xFF	; 255
    1214:	82 1a       	sub	r8, r18
    1216:	92 0a       	sbc	r9, r18
    1218:	a2 0a       	sbc	r10, r18
    121a:	b2 0a       	sbc	r11, r18
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
				_delay_us(5);
				address++;
    1220:	e8 16       	cp	r14, r24
    1222:	f9 06       	cpc	r15, r25
    1224:	51 f7       	brne	.-44     	; 0x11fa <main+0x8cc>
    1226:	6f ef       	ldi	r22, 0xFF	; 255
    1228:	c8 01       	movw	r24, r16
			gb_flash_write_bus_cycle(0x13f, 0xa5);
			_delay_us(5);
			
			
			// Write data
			for (uint8_t x = 0; x < 128; x++) {
    122a:	cc d9       	rcall	.-3176   	; 0x5c4 <gb_flash_write_bus_cycle>
    122c:	ef e3       	ldi	r30, 0x3F	; 63
    122e:	fc e9       	ldi	r31, 0x9C	; 156
    1230:	31 97       	sbiw	r30, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <main+0x902>
				address++;
			}
			
			// Write buffer to flash
			address--;
			gb_flash_write_bus_cycle(address, 0xFF);
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <main+0x908>
    1236:	00 00       	nop
    1238:	81 e3       	ldi	r24, 0x31	; 49
    123a:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    123e:	2f 98       	cbi	0x05, 7	; 5
    1240:	9c cb       	rjmp	.-2248   	; 0x97a <main+0x4c>
    1242:	8e 36       	cpi	r24, 0x6E	; 110
    1244:	59 f5       	brne	.+86     	; 0x129c <main+0x96e>
    1246:	0e 94 c4 00 	call	0x188	; 0x188 <usart_read_chars>
			address++;
			_delay_ms(10);
			
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    124a:	40 e1       	ldi	r20, 0x10	; 16
    124c:	50 e0       	ldi	r21, 0x00	; 0
			PORTB &= ~(1<<ACTIVITY_LED);
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	70 e0       	ldi	r23, 0x00	; 0
		}
		
		
		// ---------- GBA FLASH CARTS ----------
		// Write 24 bit address, 16 bit data and pulse a pin
		else if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
    1252:	82 e1       	ldi	r24, 0x12	; 18
    1254:	92 e0       	ldi	r25, 0x02	; 2
			usart_read_chars(); // Read address
    1256:	cc d2       	rcall	.+1432   	; 0x17f0 <strtol>
    1258:	6b 01       	movw	r12, r22
			uint32_t flashAddress = strtol(receivedBuffer, NULL, 16); // Convert address string in hex to dec
    125a:	7c 01       	movw	r14, r24
    125c:	0e 94 93 00 	call	0x126	; 0x126 <USART_Receive>
    1260:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
    1264:	8e 36       	cpi	r24, 0x6E	; 110
    1266:	09 f0       	breq	.+2      	; 0x126a <main+0x93c>
    1268:	88 cb       	rjmp	.-2288   	; 0x97a <main+0x4c>
    126a:	0e 94 c4 00 	call	0x188	; 0x188 <usart_read_chars>
			
			receivedChar = USART_Receive(); // Wait for byte
    126e:	40 e1       	ldi	r20, 0x10	; 16
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	60 e0       	ldi	r22, 0x00	; 0
			if (receivedChar == GBA_FLASH_CART_WRITE_BYTE) {
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	82 e1       	ldi	r24, 0x12	; 18
    1278:	92 e0       	ldi	r25, 0x02	; 2
				usart_read_chars(); // Read data
    127a:	ba d2       	rcall	.+1396   	; 0x17f0 <strtol>
				uint16_t flashByte = strtol(receivedBuffer, NULL, 16); // Convert data byte in hex to dec
    127c:	2f 9a       	sbi	0x05, 7	; 5
    127e:	2f ef       	ldi	r18, 0xFF	; 255
    1280:	21 b9       	out	0x01, r18	; 1
    1282:	e7 e0       	ldi	r30, 0x07	; 7
    1284:	f1 e0       	ldi	r31, 0x01	; 1
    1286:	20 83       	st	Z, r18
    1288:	20 bb       	out	0x10, r18	; 16
				
				PORTB |= (1<<ACTIVITY_LED);
    128a:	ab 01       	movw	r20, r22
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    128c:	c7 01       	movw	r24, r14
    128e:	b6 01       	movw	r22, r12
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1290:	8a da       	rcall	.-2796   	; 0x7a6 <gba_flash_write_bus_cycle>
    1292:	2f 98       	cbi	0x05, 7	; 5
    1294:	81 e3       	ldi	r24, 0x31	; 49
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1296:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
				gba_flash_write_bus_cycle(flashAddress, flashByte);
    129a:	6f cb       	rjmp	.-2338   	; 0x97a <main+0x4c>
    129c:	81 37       	cpi	r24, 0x71	; 113
    129e:	11 f0       	breq	.+4      	; 0x12a4 <main+0x976>
    12a0:	84 37       	cpi	r24, 0x74	; 116
				PORTB &= ~(1<<ACTIVITY_LED);
    12a2:	71 f5       	brne	.+92     	; 0x1300 <main+0x9d2>
				
				USART_Transmit(SEND_ACK); // Send back acknowledgement
    12a4:	2f 9a       	sbi	0x05, 7	; 5
    12a6:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <receivedChar>
    12aa:	84 37       	cpi	r24, 0x74	; 116
			}
		}
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <main+0x982>
    12ae:	92 c2       	rjmp	.+1316   	; 0x17d4 <main+0xea6>
    12b0:	e1 2c       	mov	r14, r1
    12b2:	ff 24       	eor	r15, r15
			PORTB |= (1<<ACTIVITY_LED);
    12b4:	f3 94       	inc	r15
			
			int readLength = 64;
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
    12b6:	92 c2       	rjmp	.+1316   	; 0x17dc <main+0xeae>
    12b8:	ed 81       	ldd	r30, Y+5	; 0x05
    12ba:	fe 81       	ldd	r31, Y+6	; 0x06
    12bc:	41 81       	ldd	r20, Z+1	; 0x01
    12be:	50 e0       	ldi	r21, 0x00	; 0
				readLength = 256;
    12c0:	54 2f       	mov	r21, r20
    12c2:	44 27       	eor	r20, r20
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2b       	or	r20, r24
			}
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    12c8:	4f 3f       	cpi	r20, 0xFF	; 255
    12ca:	ff ef       	ldi	r31, 0xFF	; 255
    12cc:	5f 07       	cpc	r21, r31
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <main+0x9aa>
    12d0:	21 e0       	ldi	r18, 0x01	; 1
    12d2:	c5 01       	movw	r24, r10
    12d4:	b4 01       	movw	r22, r8
				if (combinedBytes != 0xFFFF) {
    12d6:	e5 da       	rcall	.-2614   	; 0x8a2 <gba_flash_write_byte>
    12d8:	2f ef       	ldi	r18, 0xFF	; 255
    12da:	82 1a       	sub	r8, r18
    12dc:	92 0a       	sbc	r9, r18
					gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
    12de:	a2 0a       	sbc	r10, r18
    12e0:	b2 0a       	sbc	r11, r18
    12e2:	0e 5f       	subi	r16, 0xFE	; 254
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
				}
				address++;
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	02 96       	adiw	r24, 0x02	; 2
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	8d 83       	std	Y+5, r24	; 0x05
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
    12f0:	0e 15       	cp	r16, r14
    12f2:	1f 05       	cpc	r17, r15
    12f4:	0c f3       	brlt	.-62     	; 0x12b8 <main+0x98a>
    12f6:	81 e3       	ldi	r24, 0x31	; 49
    12f8:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
    12fc:	2f 98       	cbi	0x05, 7	; 5
    12fe:	3d cb       	rjmp	.-2438   	; 0x97a <main+0x4c>
    1300:	86 36       	cpi	r24, 0x66	; 102
    1302:	a1 f5       	brne	.+104    	; 0x136c <main+0xa3e>
				if (combinedBytes != 0xFFFF) {
					gba_flash_write_byte(address, combinedBytes, D0D1_SWAPPED);
				}
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    1304:	2f 9a       	sbi	0x05, 7	; 5
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	91 e0       	ldi	r25, 0x01	; 1
			
			PORTB &= ~(1<<ACTIVITY_LED);
    130a:	0e 94 a3 00 	call	0x146	; 0x146 <usart_read_bytes>
		}
		
		// Write 256 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_256BYTE) {
    130e:	e2 e1       	ldi	r30, 0x12	; 18
    1310:	f2 e0       	ldi	r31, 0x02	; 2
			PORTB |= (1<<ACTIVITY_LED);
    1312:	02 e1       	ldi	r16, 0x12	; 18
			
			int readLength = 256;
			usart_read_bytes(readLength);
    1314:	13 e0       	ldi	r17, 0x03	; 3
    1316:	75 01       	movw	r14, r10
    1318:	64 01       	movw	r12, r8
    131a:	fe 83       	std	Y+6, r31	; 0x06
    131c:	ed 83       	std	Y+5, r30	; 0x05
    131e:	ed 81       	ldd	r30, Y+5	; 0x05
    1320:	fe 81       	ldd	r31, Y+6	; 0x06
    1322:	41 81       	ldd	r20, Z+1	; 0x01
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	54 2f       	mov	r21, r20
    1328:	44 27       	eor	r20, r20
			
			for (int x = 0; x < readLength; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    132a:	80 81       	ld	r24, Z
    132c:	48 2b       	or	r20, r24
    132e:	4f 3f       	cpi	r20, 0xFF	; 255
    1330:	ff ef       	ldi	r31, 0xFF	; 255
    1332:	5f 07       	cpc	r21, r31
    1334:	21 f0       	breq	.+8      	; 0x133e <main+0xa10>
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	c7 01       	movw	r24, r14
				if (combinedBytes != 0xFFFF) {
    133a:	b6 01       	movw	r22, r12
    133c:	b2 da       	rcall	.-2716   	; 0x8a2 <gba_flash_write_byte>
    133e:	2f ef       	ldi	r18, 0xFF	; 255
    1340:	c2 1a       	sub	r12, r18
					gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
    1342:	d2 0a       	sbc	r13, r18
    1344:	e2 0a       	sbc	r14, r18
    1346:	f2 0a       	sbc	r15, r18
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
				}
				address++;
    134c:	02 96       	adiw	r24, 0x02	; 2
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	80 17       	cp	r24, r16
    1354:	91 07       	cpc	r25, r17
    1356:	19 f7       	brne	.-58     	; 0x131e <main+0x9f0>
    1358:	90 e8       	ldi	r25, 0x80	; 128
    135a:	89 0e       	add	r8, r25
    135c:	91 1c       	adc	r9, r1
    135e:	a1 1c       	adc	r10, r1
			PORTB |= (1<<ACTIVITY_LED);
			
			int readLength = 256;
			usart_read_bytes(readLength);
			
			for (int x = 0; x < readLength; x += 2) {
    1360:	b1 1c       	adc	r11, r1
    1362:	81 e3       	ldi	r24, 0x31	; 49
    1364:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
    1368:	2f 98       	cbi	0x05, 7	; 5
    136a:	07 cb       	rjmp	.-2546   	; 0x97a <main+0x4c>
    136c:	8c 36       	cpi	r24, 0x6C	; 108
				if (combinedBytes != 0xFFFF) {
					gba_flash_write_byte(address, combinedBytes, D0D1_NOT_SWAPPED);
				}
				address++;
			}
			USART_Transmit(SEND_ACK); // Send back acknowledgement
    136e:	09 f0       	breq	.+2      	; 0x1372 <main+0xa44>
    1370:	94 c0       	rjmp	.+296    	; 0x149a <main+0xb6c>
    1372:	2f 9a       	sbi	0x05, 7	; 5
			
			PORTB &= ~(1<<ACTIVITY_LED);
    1374:	80 e4       	ldi	r24, 0x40	; 64
    1376:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		// Intel flash command based chips
		// Write 64 bytes to Flash address, combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE) {
    1378:	0e 94 a3 00 	call	0x146	; 0x146 <usart_read_bytes>
    137c:	8f ef       	ldi	r24, 0xFF	; 255
			PORTB |= (1<<ACTIVITY_LED);
    137e:	81 b9       	out	0x01, r24	; 1
			usart_read_bytes(64);
    1380:	e7 e0       	ldi	r30, 0x07	; 7
    1382:	f1 e0       	ldi	r31, 0x01	; 1
    1384:	80 83       	st	Z, r24
    1386:	80 bb       	out	0x10, r24	; 16
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    1388:	40 e6       	ldi	r20, 0x60	; 96
    138a:	50 e0       	ldi	r21, 0x00	; 0
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    138c:	c5 01       	movw	r24, r10
    138e:	b4 01       	movw	r22, r8
    1390:	0a da       	rcall	.-3052   	; 0x7a6 <gba_flash_write_bus_cycle>
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1392:	40 ed       	ldi	r20, 0xD0	; 208
			
			// Unlock
			gba_flash_write_bus_cycle(address, 0x60);
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	c5 01       	movw	r24, r10
    1398:	b4 01       	movw	r22, r8
    139a:	05 da       	rcall	.-3062   	; 0x7a6 <gba_flash_write_bus_cycle>
    139c:	48 ee       	ldi	r20, 0xE8	; 232
    139e:	50 e0       	ldi	r21, 0x00	; 0
			gba_flash_write_bus_cycle(address, 0xD0);
    13a0:	c5 01       	movw	r24, r10
    13a2:	b4 01       	movw	r22, r8
    13a4:	00 da       	rcall	.-3072   	; 0x7a6 <gba_flash_write_bus_cycle>
    13a6:	87 ec       	ldi	r24, 0xC7	; 199
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	01 97       	sbiw	r24, 0x01	; 1
			
			// Buffered write command
			gba_flash_write_bus_cycle(address, 0xE8);
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <main+0xa7c>
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <main+0xa82>
    13b0:	00 00       	nop
    13b2:	c5 01       	movw	r24, r10
    13b4:	b4 01       	movw	r22, r8
    13b6:	0e 94 24 01 	call	0x248	; 0x248 <gba_read_16bit_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ba:	80 38       	cpi	r24, 0x80	; 128
    13bc:	91 05       	cpc	r25, r1
    13be:	69 f0       	breq	.+26     	; 0x13da <main+0xaac>
    13c0:	c5 01       	movw	r24, r10
    13c2:	b4 01       	movw	r22, r8
			_delay_us(50);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			uint16_t dataVerify = gba_read_16bit_data(address);
    13c4:	0e 94 24 01 	call	0x248	; 0x248 <gba_read_16bit_data>
    13c8:	e7 ec       	ldi	r30, 0xC7	; 199
			while (dataVerify != 0x0080) {
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	31 97       	sbiw	r30, 0x01	; 1
				dataVerify = gba_read_16bit_data(address);
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <main+0xa9e>
    13d0:	00 c0       	rjmp	.+0      	; 0x13d2 <main+0xaa4>
    13d2:	00 00       	nop
    13d4:	80 38       	cpi	r24, 0x80	; 128
    13d6:	91 05       	cpc	r25, r1
    13d8:	99 f7       	brne	.-26     	; 0x13c0 <main+0xa92>
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	81 b9       	out	0x01, r24	; 1
    13de:	e7 e0       	ldi	r30, 0x07	; 7
    13e0:	f1 e0       	ldi	r31, 0x01	; 1
			gba_flash_write_bus_cycle(address, 0xE8);
			_delay_us(50);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			uint16_t dataVerify = gba_read_16bit_data(address);
			while (dataVerify != 0x0080) {
    13e2:	80 83       	st	Z, r24
    13e4:	80 bb       	out	0x10, r24	; 16
    13e6:	4f e1       	ldi	r20, 0x1F	; 31
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	c5 01       	movw	r24, r10
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    13ec:	b4 01       	movw	r22, r8
    13ee:	db d9       	rcall	.-3146   	; 0x7a6 <gba_flash_write_bus_cycle>
    13f0:	22 e1       	ldi	r18, 0x12	; 18
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    13f2:	32 e0       	ldi	r19, 0x02	; 2
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
    13f4:	02 e5       	ldi	r16, 0x52	; 82
    13f6:	12 e0       	ldi	r17, 0x02	; 2
    13f8:	75 01       	movw	r14, r10
    13fa:	64 01       	movw	r12, r8
    13fc:	3e 83       	std	Y+6, r19	; 0x06
    13fe:	2d 83       	std	Y+5, r18	; 0x05
    1400:	ed 81       	ldd	r30, Y+5	; 0x05
    1402:	fe 81       	ldd	r31, Y+6	; 0x06
    1404:	41 81       	ldd	r20, Z+1	; 0x01
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	54 2f       	mov	r21, r20
    140a:	44 27       	eor	r20, r20
    140c:	80 81       	ld	r24, Z
    140e:	48 2b       	or	r20, r24
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
				gba_flash_write_bus_cycle(address, combinedBytes);
    1410:	c7 01       	movw	r24, r14
    1412:	b6 01       	movw	r22, r12
    1414:	c8 d9       	rcall	.-3184   	; 0x7a6 <gba_flash_write_bus_cycle>
    1416:	ff ef       	ldi	r31, 0xFF	; 255
    1418:	cf 1a       	sub	r12, r31
    141a:	df 0a       	sbc	r13, r31
    141c:	ef 0a       	sbc	r14, r31
    141e:	ff 0a       	sbc	r15, r31
    1420:	2d 81       	ldd	r18, Y+5	; 0x05
    1422:	3e 81       	ldd	r19, Y+6	; 0x06
    1424:	2e 5f       	subi	r18, 0xFE	; 254
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
				address++;
    1428:	3e 83       	std	Y+6, r19	; 0x06
    142a:	2d 83       	std	Y+5, r18	; 0x05
    142c:	02 17       	cp	r16, r18
    142e:	13 07       	cpc	r17, r19
    1430:	39 f7       	brne	.-50     	; 0x1400 <main+0xad2>
    1432:	30 e2       	ldi	r19, 0x20	; 32
    1434:	83 0e       	add	r8, r19
    1436:	91 1c       	adc	r9, r1
    1438:	a1 1c       	adc	r10, r1
    143a:	b1 1c       	adc	r11, r1
			
			// Set length
			gba_flash_write_bus_cycle(address, 0x1F);
			
			// Write data
			for (int x = 0; x < 64; x += 2) {
    143c:	40 ed       	ldi	r20, 0xD0	; 208
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	c5 01       	movw	r24, r10
    1442:	b4 01       	movw	r22, r8
    1444:	b0 d9       	rcall	.-3232   	; 0x7a6 <gba_flash_write_bus_cycle>
    1446:	8f ed       	ldi	r24, 0xDF	; 223
    1448:	96 e0       	ldi	r25, 0x06	; 6
    144a:	01 97       	sbiw	r24, 0x01	; 1
				gba_flash_write_bus_cycle(address, combinedBytes);
				address++;
			}
			
			// Write buffer to flash
			gba_flash_write_bus_cycle(address, 0xD0);
    144c:	f1 f7       	brne	.-4      	; 0x144a <main+0xb1c>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <main+0xb22>
    1450:	00 00       	nop
    1452:	c5 01       	movw	r24, r10
    1454:	b4 01       	movw	r22, r8
    1456:	0e 94 24 01 	call	0x248	; 0x248 <gba_read_16bit_data>
    145a:	80 38       	cpi	r24, 0x80	; 128
    145c:	91 05       	cpc	r25, r1
    145e:	69 f0       	breq	.+26     	; 0x147a <main+0xb4c>
    1460:	c5 01       	movw	r24, r10
    1462:	b4 01       	movw	r22, r8
			_delay_us(440);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			dataVerify = gba_read_16bit_data(address);
    1464:	0e 94 24 01 	call	0x248	; 0x248 <gba_read_16bit_data>
    1468:	e7 ec       	ldi	r30, 0xC7	; 199
    146a:	f0 e0       	ldi	r31, 0x00	; 0
			while (dataVerify != 0x0080) {
    146c:	31 97       	sbiw	r30, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <main+0xb3e>
    1470:	00 c0       	rjmp	.+0      	; 0x1472 <main+0xb44>
				dataVerify = gba_read_16bit_data(address);
    1472:	00 00       	nop
    1474:	80 38       	cpi	r24, 0x80	; 128
    1476:	91 05       	cpc	r25, r1
    1478:	99 f7       	brne	.-26     	; 0x1460 <main+0xb32>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	81 b9       	out	0x01, r24	; 1
    147e:	e7 e0       	ldi	r30, 0x07	; 7
    1480:	f1 e0       	ldi	r31, 0x01	; 1
    1482:	80 83       	st	Z, r24
    1484:	80 bb       	out	0x10, r24	; 16
			gba_flash_write_bus_cycle(address, 0xD0);
			_delay_us(440);
			
			// Wait for first 2 bytes to be 0x80, 0x00
			dataVerify = gba_read_16bit_data(address);
			while (dataVerify != 0x0080) {
    1486:	4f ef       	ldi	r20, 0xFF	; 255
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	c5 01       	movw	r24, r10
				_delay_us(50);
			}
			
			
			// Set address lines as outputs
			GBA_DDR_ROM_ADDR23_16 = 0xFF;
    148c:	b4 01       	movw	r22, r8
    148e:	8b d9       	rcall	.-3306   	; 0x7a6 <gba_flash_write_bus_cycle>
			GBA_DDR_ROM_ADDR15_8 = 0xFF;
    1490:	81 e3       	ldi	r24, 0x31	; 49
    1492:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
			GBA_DDR_ROM_ADDR7_0 = 0xFF;
    1496:	2f 98       	cbi	0x05, 7	; 5
			
			// Back to reading mode
			gba_flash_write_bus_cycle(address, 0xFF);
    1498:	70 ca       	rjmp	.-2848   	; 0x97a <main+0x4c>
    149a:	85 37       	cpi	r24, 0x75	; 117
    149c:	09 f0       	breq	.+2      	; 0x14a0 <main+0xb72>
    149e:	53 c0       	rjmp	.+166    	; 0x1546 <main+0xc18>
    14a0:	2f 9a       	sbi	0x05, 7	; 5
    14a2:	80 e4       	ldi	r24, 0x40	; 64
			
			USART_Transmit(SEND_ACK); // Send back acknowledgment
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 a3 00 	call	0x146	; 0x146 <usart_read_bytes>
			PORTB &= ~(1<<ACTIVITY_LED);
    14aa:	02 e1       	ldi	r16, 0x12	; 18
    14ac:	12 e0       	ldi	r17, 0x02	; 2
		}
		
		// Intel word programming
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
    14ae:	0f 2e       	mov	r0, r31
    14b0:	f2 e5       	ldi	r31, 0x52	; 82
    14b2:	6f 2e       	mov	r6, r31
			PORTB |= (1<<ACTIVITY_LED);
    14b4:	f2 e0       	ldi	r31, 0x02	; 2
			usart_read_bytes(64);
    14b6:	7f 2e       	mov	r7, r31
    14b8:	f0 2d       	mov	r31, r0
    14ba:	75 01       	movw	r14, r10
    14bc:	64 01       	movw	r12, r8
    14be:	55 24       	eor	r5, r5
    14c0:	5a 94       	dec	r5
    14c2:	51 b8       	out	0x01, r5	; 1
    14c4:	e7 e0       	ldi	r30, 0x07	; 7
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	50 82       	st	Z, r5
    14ca:	50 ba       	out	0x10, r5	; 16
    14cc:	f8 01       	movw	r30, r16
    14ce:	f1 81       	ldd	r31, Z+1	; 0x01
    14d0:	2f 2f       	mov	r18, r31
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
				// Set address lines as outputs
				GBA_DDR_ROM_ADDR23_16 = 0xFF;
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	92 2f       	mov	r25, r18
    14d6:	88 27       	eor	r24, r24
				GBA_DDR_ROM_ADDR15_8 = 0xFF;
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	f8 01       	movw	r30, r16
				GBA_DDR_ROM_ADDR7_0 = 0xFF;
    14de:	80 81       	ld	r24, Z
				
				uint16_t combinedBytes = (uint16_t) receivedBuffer[x+1] << 8 | (uint16_t) receivedBuffer[x];
    14e0:	2d 81       	ldd	r18, Y+5	; 0x05
    14e2:	3e 81       	ldd	r19, Y+6	; 0x06
    14e4:	28 2b       	or	r18, r24
    14e6:	3e 83       	std	Y+6, r19	; 0x06
    14e8:	2d 83       	std	Y+5, r18	; 0x05
    14ea:	40 e4       	ldi	r20, 0x40	; 64
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	c7 01       	movw	r24, r14
    14f0:	b6 01       	movw	r22, r12
    14f2:	59 d9       	rcall	.-3406   	; 0x7a6 <gba_flash_write_bus_cycle>
    14f4:	4d 81       	ldd	r20, Y+5	; 0x05
    14f6:	5e 81       	ldd	r21, Y+6	; 0x06
    14f8:	c7 01       	movw	r24, r14
    14fa:	b6 01       	movw	r22, r12
    14fc:	54 d9       	rcall	.-3416   	; 0x7a6 <gba_flash_write_bus_cycle>
				gba_flash_write_bus_cycle(address, 0x40);
    14fe:	c7 01       	movw	r24, r14
    1500:	b6 01       	movw	r22, r12
    1502:	0e 94 24 01 	call	0x248	; 0x248 <gba_read_16bit_data>
    1506:	87 fd       	sbrc	r24, 7
				gba_flash_write_bus_cycle(address, combinedBytes);
    1508:	0a c0       	rjmp	.+20     	; 0x151e <main+0xbf0>
    150a:	c7 01       	movw	r24, r14
    150c:	b6 01       	movw	r22, r12
    150e:	0e 94 24 01 	call	0x248	; 0x248 <gba_read_16bit_data>
    1512:	3a e0       	ldi	r19, 0x0A	; 10
				
				// Verify status ok
				uint16_t status = gba_read_16bit_data(address);
    1514:	3a 95       	dec	r19
    1516:	f1 f7       	brne	.-4      	; 0x1514 <main+0xbe6>
    1518:	00 c0       	rjmp	.+0      	; 0x151a <main+0xbec>
    151a:	87 ff       	sbrs	r24, 7
				while ((status & 0x80) == 0) {
    151c:	f6 cf       	rjmp	.-20     	; 0x150a <main+0xbdc>
    151e:	8f ef       	ldi	r24, 0xFF	; 255
					status = gba_read_16bit_data(address);
    1520:	c8 1a       	sub	r12, r24
    1522:	d8 0a       	sbc	r13, r24
    1524:	e8 0a       	sbc	r14, r24
    1526:	f8 0a       	sbc	r15, r24
    1528:	0e 5f       	subi	r16, 0xFE	; 254
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	60 16       	cp	r6, r16
    152e:	71 06       	cpc	r7, r17
				gba_flash_write_bus_cycle(address, 0x40);
				gba_flash_write_bus_cycle(address, combinedBytes);
				
				// Verify status ok
				uint16_t status = gba_read_16bit_data(address);
				while ((status & 0x80) == 0) {
    1530:	41 f6       	brne	.-112    	; 0x14c2 <main+0xb94>
    1532:	90 e2       	ldi	r25, 0x20	; 32
					status = gba_read_16bit_data(address);
					_delay_us(2);
				}
				address++;
    1534:	89 0e       	add	r8, r25
    1536:	91 1c       	adc	r9, r1
    1538:	a1 1c       	adc	r10, r1
    153a:	b1 1c       	adc	r11, r1
    153c:	81 e3       	ldi	r24, 0x31	; 49
    153e:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
		else if (receivedChar == GBA_FLASH_WRITE_INTEL_64BYTE_WORD) {
			PORTB |= (1<<ACTIVITY_LED);
			usart_read_bytes(64);
			
			// Write data
			for (uint8_t x = 0; x < 64; x += 2) {
    1542:	2f 98       	cbi	0x05, 7	; 5
    1544:	1a ca       	rjmp	.-3020   	; 0x97a <main+0x4c>
    1546:	89 34       	cpi	r24, 0x49	; 73
    1548:	19 f0       	breq	.+6      	; 0x1550 <main+0xc22>
    154a:	8f 34       	cpi	r24, 0x4F	; 79
    154c:	09 f0       	breq	.+2      	; 0x1550 <main+0xc22>
    154e:	63 c0       	rjmp	.+198    	; 0x1616 <main+0xce8>
    1550:	0e 94 93 00 	call	0x126	; 0x126 <USART_Receive>
					_delay_us(2);
				}
				address++;
			}
			
			USART_Transmit(SEND_ACK); // Send back acknowledgment
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	0e 94 c4 00 	call	0x188	; 0x188 <usart_read_chars>
			PORTB &= ~(1<<ACTIVITY_LED);
    155a:	40 e1       	ldi	r20, 0x10	; 16
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	82 e1       	ldi	r24, 0x12	; 18
    1564:	92 e0       	ldi	r25, 0x02	; 2
			char portChar = USART_Receive();
    1566:	44 d1       	rcall	.+648    	; 0x17f0 <strtol>
    1568:	2f 9a       	sbi	0x05, 7	; 5
    156a:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <receivedChar>
			usart_read_chars();
    156e:	89 34       	cpi	r24, 0x49	; 73
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    1570:	51 f5       	brne	.+84     	; 0x15c6 <main+0xc98>
    1572:	ed 81       	ldd	r30, Y+5	; 0x05
    1574:	e1 34       	cpi	r30, 0x41	; 65
    1576:	39 f4       	brne	.+14     	; 0x1586 <main+0xc58>
    1578:	e7 e0       	ldi	r30, 0x07	; 7
    157a:	f1 e0       	ldi	r31, 0x01	; 1
    157c:	80 81       	ld	r24, Z
			
			PORTB |= (1<<ACTIVITY_LED);
    157e:	60 95       	com	r22
			if (receivedChar == SET_INPUT) {
    1580:	68 23       	and	r22, r24
    1582:	60 83       	st	Z, r22
    1584:	46 c0       	rjmp	.+140    	; 0x1612 <main+0xce4>
    1586:	fd 81       	ldd	r31, Y+5	; 0x05
				if (portChar == 'A') {
    1588:	f2 34       	cpi	r31, 0x42	; 66
    158a:	29 f4       	brne	.+10     	; 0x1596 <main+0xc68>
    158c:	80 b3       	in	r24, 0x10	; 16
					DDRK &= ~(setValue);
    158e:	60 95       	com	r22
    1590:	68 23       	and	r22, r24
    1592:	60 bb       	out	0x10, r22	; 16
    1594:	3e c0       	rjmp	.+124    	; 0x1612 <main+0xce4>
    1596:	2d 81       	ldd	r18, Y+5	; 0x05
    1598:	23 34       	cpi	r18, 0x43	; 67
    159a:	29 f4       	brne	.+10     	; 0x15a6 <main+0xc78>
				}
				else if (portChar == 'B') {
    159c:	81 b1       	in	r24, 0x01	; 1
    159e:	60 95       	com	r22
    15a0:	68 23       	and	r22, r24
					DDRF &= ~(setValue);
    15a2:	61 b9       	out	0x01, r22	; 1
    15a4:	36 c0       	rjmp	.+108    	; 0x1612 <main+0xce4>
    15a6:	3d 81       	ldd	r19, Y+5	; 0x05
    15a8:	34 34       	cpi	r19, 0x44	; 68
    15aa:	29 f4       	brne	.+10     	; 0x15b6 <main+0xc88>
				}
				else if (portChar == 'C') {
    15ac:	83 b3       	in	r24, 0x13	; 19
    15ae:	60 95       	com	r22
    15b0:	68 23       	and	r22, r24
					DDRA &= ~(setValue);
    15b2:	63 bb       	out	0x13, r22	; 19
    15b4:	2e c0       	rjmp	.+92     	; 0x1612 <main+0xce4>
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	85 34       	cpi	r24, 0x45	; 69
    15ba:	59 f5       	brne	.+86     	; 0x1612 <main+0xce4>
				}
				else if (portChar == 'D') {
    15bc:	84 b1       	in	r24, 0x04	; 4
    15be:	60 95       	com	r22
    15c0:	68 23       	and	r22, r24
					DDRG &= ~(setValue);
    15c2:	64 b9       	out	0x04, r22	; 4
    15c4:	26 c0       	rjmp	.+76     	; 0x1612 <main+0xce4>
    15c6:	8f 34       	cpi	r24, 0x4F	; 79
    15c8:	21 f5       	brne	.+72     	; 0x1612 <main+0xce4>
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
				}
				else if (portChar == 'E') {
    15cc:	91 34       	cpi	r25, 0x41	; 65
    15ce:	31 f4       	brne	.+12     	; 0x15dc <main+0xcae>
    15d0:	e7 e0       	ldi	r30, 0x07	; 7
					DDRB &= ~(setValue);
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	80 81       	ld	r24, Z
    15d6:	68 2b       	or	r22, r24
    15d8:	60 83       	st	Z, r22
    15da:	1b c0       	rjmp	.+54     	; 0x1612 <main+0xce4>
				}
			}
			else if (receivedChar == SET_OUTPUT) {
    15dc:	fd 81       	ldd	r31, Y+5	; 0x05
    15de:	f2 34       	cpi	r31, 0x42	; 66
				if (portChar == 'A') {
    15e0:	21 f4       	brne	.+8      	; 0x15ea <main+0xcbc>
    15e2:	80 b3       	in	r24, 0x10	; 16
    15e4:	68 2b       	or	r22, r24
					DDRK |= (setValue);
    15e6:	60 bb       	out	0x10, r22	; 16
    15e8:	14 c0       	rjmp	.+40     	; 0x1612 <main+0xce4>
    15ea:	2d 81       	ldd	r18, Y+5	; 0x05
    15ec:	23 34       	cpi	r18, 0x43	; 67
    15ee:	21 f4       	brne	.+8      	; 0x15f8 <main+0xcca>
    15f0:	81 b1       	in	r24, 0x01	; 1
				}
				else if (portChar == 'B') {
    15f2:	68 2b       	or	r22, r24
    15f4:	61 b9       	out	0x01, r22	; 1
    15f6:	0d c0       	rjmp	.+26     	; 0x1612 <main+0xce4>
					DDRF |= (setValue);
    15f8:	3d 81       	ldd	r19, Y+5	; 0x05
    15fa:	34 34       	cpi	r19, 0x44	; 68
    15fc:	21 f4       	brne	.+8      	; 0x1606 <main+0xcd8>
    15fe:	8a b1       	in	r24, 0x0a	; 10
				}
				else if (portChar == 'C') {
    1600:	68 2b       	or	r22, r24
    1602:	6a b9       	out	0x0a, r22	; 10
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <main+0xce4>
					DDRA |= (setValue);
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	85 34       	cpi	r24, 0x45	; 69
    160a:	19 f4       	brne	.+6      	; 0x1612 <main+0xce4>
    160c:	84 b1       	in	r24, 0x04	; 4
				}
				else if (portChar == 'D') {
    160e:	68 2b       	or	r22, r24
    1610:	64 b9       	out	0x04, r22	; 4
    1612:	2f 98       	cbi	0x05, 7	; 5
					DDRD |= (setValue);
    1614:	b2 c9       	rjmp	.-3228   	; 0x97a <main+0x4c>
    1616:	8c 34       	cpi	r24, 0x4C	; 76
    1618:	c1 f5       	brne	.+112    	; 0x168a <main+0xd5c>
    161a:	0e 94 93 00 	call	0x126	; 0x126 <USART_Receive>
				}
				else if (portChar == 'E') {
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	0e 94 c4 00 	call	0x188	; 0x188 <usart_read_chars>
					DDRB |= (setValue);
    1624:	40 e1       	ldi	r20, 0x10	; 16
    1626:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
			PORTB &= ~(1<<ACTIVITY_LED);
    1628:	60 e0       	ldi	r22, 0x00	; 0
		
		
		// ---------- General commands ----------
		// Set any pin as input/output
		// Reads the DDR/PORT (e.g. DDRB/PORTB is 'B') and the hex value that represents pins to set to an input (e.g. PB7 is 0x80)
		else if (receivedChar == SET_INPUT || receivedChar == SET_OUTPUT) {
    162a:	70 e0       	ldi	r23, 0x00	; 0
			}
			PORTB &= ~(1<<ACTIVITY_LED);
		}
		
		// Set pin output as low
		else if (receivedChar == SET_OUTPUT_LOW) {
    162c:	82 e1       	ldi	r24, 0x12	; 18
    162e:	92 e0       	ldi	r25, 0x02	; 2
			char portChar = USART_Receive();			
    1630:	df d0       	rcall	.+446    	; 0x17f0 <strtol>
    1632:	2f 9a       	sbi	0x05, 7	; 5
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
			usart_read_chars();
    1636:	91 34       	cpi	r25, 0x41	; 65
    1638:	39 f4       	brne	.+14     	; 0x1648 <main+0xd1a>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    163a:	e8 e0       	ldi	r30, 0x08	; 8
    163c:	f1 e0       	ldi	r31, 0x01	; 1
    163e:	80 81       	ld	r24, Z
    1640:	60 95       	com	r22
    1642:	68 23       	and	r22, r24
    1644:	60 83       	st	Z, r22
    1646:	1f c0       	rjmp	.+62     	; 0x1686 <main+0xd58>
    1648:	ed 81       	ldd	r30, Y+5	; 0x05
			
			PORTB |= (1<<ACTIVITY_LED);
    164a:	e2 34       	cpi	r30, 0x42	; 66
			if (portChar == 'A') {
    164c:	29 f4       	brne	.+10     	; 0x1658 <main+0xd2a>
    164e:	81 b3       	in	r24, 0x11	; 17
				PORTK &= ~(setValue);
    1650:	60 95       	com	r22
    1652:	68 23       	and	r22, r24
    1654:	61 bb       	out	0x11, r22	; 17
    1656:	17 c0       	rjmp	.+46     	; 0x1686 <main+0xd58>
    1658:	fd 81       	ldd	r31, Y+5	; 0x05
    165a:	f3 34       	cpi	r31, 0x43	; 67
    165c:	29 f4       	brne	.+10     	; 0x1668 <main+0xd3a>
			}
			else if (portChar == 'B') {
    165e:	88 b1       	in	r24, 0x08	; 8
    1660:	60 95       	com	r22
    1662:	68 23       	and	r22, r24
				PORTF &= ~(setValue);
    1664:	68 b9       	out	0x08, r22	; 8
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <main+0xd58>
    1668:	2d 81       	ldd	r18, Y+5	; 0x05
    166a:	24 34       	cpi	r18, 0x44	; 68
    166c:	29 f4       	brne	.+10     	; 0x1678 <main+0xd4a>
			}
			else if (portChar == 'C') {
    166e:	8b b1       	in	r24, 0x0b	; 11
    1670:	60 95       	com	r22
    1672:	68 23       	and	r22, r24
				PORTC &= ~(setValue);
    1674:	6b b9       	out	0x0b, r22	; 11
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <main+0xd58>
    1678:	3d 81       	ldd	r19, Y+5	; 0x05
    167a:	35 34       	cpi	r19, 0x45	; 69
    167c:	21 f4       	brne	.+8      	; 0x1686 <main+0xd58>
			}
			else if (portChar == 'D') {
    167e:	85 b1       	in	r24, 0x05	; 5
    1680:	60 95       	com	r22
    1682:	68 23       	and	r22, r24
				PORTD &= ~(setValue);
    1684:	65 b9       	out	0x05, r22	; 5
    1686:	2f 98       	cbi	0x05, 7	; 5
    1688:	78 c9       	rjmp	.-3344   	; 0x97a <main+0x4c>
    168a:	88 34       	cpi	r24, 0x48	; 72
    168c:	99 f5       	brne	.+102    	; 0x16f4 <main+0xdc6>
			}
			else if (portChar == 'E') {
    168e:	0e 94 93 00 	call	0x126	; 0x126 <USART_Receive>
    1692:	8d 83       	std	Y+5, r24	; 0x05
				PORTB &= ~(setValue);
    1694:	0e 94 c4 00 	call	0x188	; 0x188 <usart_read_chars>
    1698:	40 e1       	ldi	r20, 0x10	; 16
    169a:	50 e0       	ldi	r21, 0x00	; 0
			}
			PORTB &= ~(1<<ACTIVITY_LED);
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	70 e0       	ldi	r23, 0x00	; 0
		}
		
		// Set pin output as high
		else if (receivedChar == SET_OUTPUT_HIGH) {
    16a0:	82 e1       	ldi	r24, 0x12	; 18
    16a2:	92 e0       	ldi	r25, 0x02	; 2
			char portChar = USART_Receive();			
    16a4:	a5 d0       	rcall	.+330    	; 0x17f0 <strtol>
    16a6:	2f 9a       	sbi	0x05, 7	; 5
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
			usart_read_chars();
    16aa:	81 34       	cpi	r24, 0x41	; 65
    16ac:	31 f4       	brne	.+12     	; 0x16ba <main+0xd8c>
			uint8_t setValue = strtol(receivedBuffer, NULL, 16);
    16ae:	e8 e0       	ldi	r30, 0x08	; 8
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    16b2:	80 81       	ld	r24, Z
    16b4:	68 2b       	or	r22, r24
    16b6:	60 83       	st	Z, r22
    16b8:	1b c0       	rjmp	.+54     	; 0x16f0 <main+0xdc2>
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	92 34       	cpi	r25, 0x42	; 66
			
			PORTB |= (1<<ACTIVITY_LED);
    16be:	21 f4       	brne	.+8      	; 0x16c8 <main+0xd9a>
			if (portChar == 'A') {
    16c0:	81 b3       	in	r24, 0x11	; 17
    16c2:	68 2b       	or	r22, r24
    16c4:	61 bb       	out	0x11, r22	; 17
				PORTK |= (setValue);
    16c6:	14 c0       	rjmp	.+40     	; 0x16f0 <main+0xdc2>
    16c8:	ed 81       	ldd	r30, Y+5	; 0x05
    16ca:	e3 34       	cpi	r30, 0x43	; 67
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <main+0xda8>
    16ce:	88 b1       	in	r24, 0x08	; 8
    16d0:	68 2b       	or	r22, r24
			}
			else if (portChar == 'B') {
    16d2:	68 b9       	out	0x08, r22	; 8
    16d4:	0d c0       	rjmp	.+26     	; 0x16f0 <main+0xdc2>
    16d6:	fd 81       	ldd	r31, Y+5	; 0x05
				PORTF |= (setValue);
    16d8:	f4 34       	cpi	r31, 0x44	; 68
    16da:	21 f4       	brne	.+8      	; 0x16e4 <main+0xdb6>
    16dc:	8b b1       	in	r24, 0x0b	; 11
    16de:	68 2b       	or	r22, r24
			}
			else if (portChar == 'C') {
    16e0:	6b b9       	out	0x0b, r22	; 11
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <main+0xdc2>
    16e4:	2d 81       	ldd	r18, Y+5	; 0x05
				PORTC |= (setValue);
    16e6:	25 34       	cpi	r18, 0x45	; 69
    16e8:	19 f4       	brne	.+6      	; 0x16f0 <main+0xdc2>
    16ea:	85 b1       	in	r24, 0x05	; 5
    16ec:	68 2b       	or	r22, r24
			}
			else if (portChar == 'D') {
    16ee:	65 b9       	out	0x05, r22	; 5
    16f0:	2f 98       	cbi	0x05, 7	; 5
    16f2:	43 c9       	rjmp	.-3450   	; 0x97a <main+0x4c>
				PORTD |= (setValue);
    16f4:	84 34       	cpi	r24, 0x44	; 68
    16f6:	21 f5       	brne	.+72     	; 0x1740 <main+0xe12>
    16f8:	0e 94 93 00 	call	0x126	; 0x126 <USART_Receive>
			}
			else if (portChar == 'E') {
    16fc:	2f 9a       	sbi	0x05, 7	; 5
    16fe:	81 34       	cpi	r24, 0x41	; 65
    1700:	31 f4       	brne	.+12     	; 0x170e <main+0xde0>
				PORTB |= (setValue);
    1702:	e6 e0       	ldi	r30, 0x06	; 6
    1704:	f1 e0       	ldi	r31, 0x01	; 1
    1706:	80 81       	ld	r24, Z
			}
			PORTB &= ~(1<<ACTIVITY_LED);
    1708:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
		}
		
		// Read all pins of a PORT and return the value
		else if (receivedChar == READ_INPUT) {
    170c:	17 c0       	rjmp	.+46     	; 0x173c <main+0xe0e>
    170e:	82 34       	cpi	r24, 0x42	; 66
			char portChar = USART_Receive();			
    1710:	21 f4       	brne	.+8      	; 0x171a <main+0xdec>
    1712:	8f b1       	in	r24, 0x0f	; 15
			
			PORTB |= (1<<ACTIVITY_LED);
    1714:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
			if (portChar == 'A') {
    1718:	11 c0       	rjmp	.+34     	; 0x173c <main+0xe0e>
				USART_Transmit(PINK);
    171a:	83 34       	cpi	r24, 0x43	; 67
    171c:	21 f4       	brne	.+8      	; 0x1726 <main+0xdf8>
    171e:	80 b1       	in	r24, 0x00	; 0
    1720:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
    1724:	0b c0       	rjmp	.+22     	; 0x173c <main+0xe0e>
			}
			else if (portChar == 'B') {
    1726:	84 34       	cpi	r24, 0x44	; 68
    1728:	21 f4       	brne	.+8      	; 0x1732 <main+0xe04>
				USART_Transmit(PINF);
    172a:	82 b3       	in	r24, 0x12	; 18
    172c:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
    1730:	05 c0       	rjmp	.+10     	; 0x173c <main+0xe0e>
			}
			else if (portChar == 'C') {
    1732:	85 34       	cpi	r24, 0x45	; 69
    1734:	19 f4       	brne	.+6      	; 0x173c <main+0xe0e>
				USART_Transmit(PINA);
    1736:	83 b1       	in	r24, 0x03	; 3
    1738:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
    173c:	2f 98       	cbi	0x05, 7	; 5
			}
			else if (portChar == 'D') {
    173e:	1d c9       	rjmp	.-3526   	; 0x97a <main+0x4c>
    1740:	8d 34       	cpi	r24, 0x4D	; 77
				USART_Transmit(PING);
    1742:	51 f4       	brne	.+20     	; 0x1758 <main+0xe2a>
    1744:	0e 94 93 00 	call	0x126	; 0x126 <USART_Receive>
    1748:	81 33       	cpi	r24, 0x31	; 49
			}
			else if (portChar == 'E') {
    174a:	09 f4       	brne	.+2      	; 0x174e <main+0xe20>
    174c:	14 c9       	rjmp	.-3544   	; 0x976 <main+0x48>
				USART_Transmit(PINB);
    174e:	80 33       	cpi	r24, 0x30	; 48
    1750:	09 f0       	breq	.+2      	; 0x1754 <main+0xe26>
    1752:	13 c9       	rjmp	.-3546   	; 0x97a <main+0x4c>
			}
			PORTB &= ~(1<<ACTIVITY_LED);
    1754:	19 82       	std	Y+1, r1	; 0x01
    1756:	11 c9       	rjmp	.-3550   	; 0x97a <main+0x4c>
		}
		
		// Set the reset common lines variable on or off, useful if you are controlling all the pins directly
		else if (receivedChar == RESET_COMMON_LINES) {
    1758:	88 36       	cpi	r24, 0x68	; 104
    175a:	21 f4       	brne	.+8      	; 0x1764 <main+0xe36>
			char commonChar = USART_Receive();
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
			if (commonChar == '1') {
    1762:	0b c9       	rjmp	.-3562   	; 0x97a <main+0x4c>
    1764:	86 35       	cpi	r24, 0x56	; 86
				resetCommonLines = 1;
			}
			else if (commonChar == '0') {
    1766:	21 f4       	brne	.+8      	; 0x1770 <main+0xe42>
    1768:	81 e1       	ldi	r24, 0x11	; 17
    176a:	0e 94 9b 00 	call	0x136	; 0x136 <USART_Transmit>
				resetCommonLines = 0;
    176e:	05 c9       	rjmp	.-3574   	; 0x97a <main+0x4c>
			}
		}
		
		// Send back the PCB version number
		else if (receivedChar == READ_PCB_VERSION) {
    1770:	8a 32       	cpi	r24, 0x2A	; 42
    1772:	09 f0       	breq	.+2      	; 0x1776 <main+0xe48>
			USART_Transmit(PCB_VERSION);
    1774:	02 c9       	rjmp	.-3580   	; 0x97a <main+0x4c>
    1776:	0e 94 c4 00 	call	0x188	; 0x188 <usart_read_chars>
    177a:	40 e1       	ldi	r20, 0x10	; 16
		}
		
		// Send back the firmware version number
		else if (receivedChar == READ_FIRMWARE_VERSION) {
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	60 e0       	ldi	r22, 0x00	; 0
			USART_Transmit(FIRMWARE_VERSION);
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	82 e1       	ldi	r24, 0x12	; 18
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	34 d0       	rcall	.+104    	; 0x17f0 <strtol>
		}
		
		// Reset the AVR if it matches the number
		else if (receivedChar == RESET_AVR) {
    1788:	61 3e       	cpi	r22, 0xE1	; 225
    178a:	75 4e       	sbci	r23, 0xE5	; 229
    178c:	87 40       	sbci	r24, 0x07	; 7
			usart_read_chars();
    178e:	91 05       	cpc	r25, r1
    1790:	09 f0       	breq	.+2      	; 0x1794 <main+0xe66>
			uint32_t resetValue = strtol(receivedBuffer, NULL, 16);
    1792:	f3 c8       	rjmp	.-3610   	; 0x97a <main+0x4c>
    1794:	85 b7       	in	r24, 0x35	; 53
    1796:	87 7f       	andi	r24, 0xF7	; 247
    1798:	85 bf       	out	0x35, r24	; 53
    179a:	88 e1       	ldi	r24, 0x18	; 24
    179c:	e0 e6       	ldi	r30, 0x60	; 96
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 83       	st	Z, r24
			if (resetValue == RESET_VALUE) {
    17a2:	8c e0       	ldi	r24, 0x0C	; 12
    17a4:	80 83       	st	Z, r24
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	9f ef       	ldi	r25, 0xFF	; 255
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <main+0xe7c>
				// Clear watchdog flag
				MCUCSR &= ~(1<<WDRF);
    17ae:	e5 c8       	rjmp	.-3638   	; 0x97a <main+0x4c>
    17b0:	81 e3       	ldi	r24, 0x31	; 49
    17b2:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
				
				// Start timed sequence
				WDTCR = (1<<WDCE) | (1<<WDE);
    17b6:	10 e8       	ldi	r17, 0x80	; 128
    17b8:	8f c9       	rjmp	.-3298   	; 0xad8 <main+0x1aa>
    17ba:	0e 94 01 01 	call	0x202	; 0x202 <gba_mode>
				
				// Reset in 250 ms
				WDTCR = (1<<WDP2) | (1<<WDE);
    17be:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <receivedChar>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c2:	8a 36       	cpi	r24, 0x6A	; 106
    17c4:	a9 f3       	breq	.-22     	; 0x17b0 <main+0xe82>
    17c6:	10 e2       	ldi	r17, 0x20	; 32
    17c8:	84 c9       	rjmp	.-3320   	; 0xad2 <main+0x1a4>
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
    17ca:	81 e3       	ldi	r24, 0x31	; 49
    17cc:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <receivedChar>
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
    17d0:	10 e2       	ldi	r17, 0x20	; 32
    17d2:	82 c9       	rjmp	.-3324   	; 0xad8 <main+0x1aa>
		// ****** Gameboy Advance ******
		
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
    17d4:	68 94       	set
    17d6:	ee 24       	eor	r14, r14
			
			uint8_t readEnd = 32;
			if (receivedChar == GBA_READ_ROM_256BYTE) {
    17d8:	e6 f8       	bld	r14, 6
    17da:	f1 2c       	mov	r15, r1
    17dc:	c7 01       	movw	r24, r14
    17de:	0e 94 a3 00 	call	0x146	; 0x146 <usart_read_bytes>
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
    17e2:	22 e1       	ldi	r18, 0x12	; 18
			if (receivedChar == GBA_READ_ROM_256BYTE) {
				readEnd = 128;
			}
			
			receivedChar = '1';
    17e4:	32 e0       	ldi	r19, 0x02	; 2
    17e6:	00 e0       	ldi	r16, 0x00	; 0
    17e8:	10 e0       	ldi	r17, 0x00	; 0
		// ---------- ROM ----------
		// Read one 16bit byte from ROM using address (and increment) until anything but 1 is received
		else if (receivedChar == GBA_READ_ROM || receivedChar == GBA_READ_ROM_256BYTE) {
			gba_mode();
			
			uint8_t readEnd = 32;
    17ea:	3e 83       	std	Y+6, r19	; 0x06
    17ec:	2d 83       	std	Y+5, r18	; 0x05
		
		// Write 64 or 256 bytes to Flash address (swapped command data bytes), combine 2 bytes and write one at a time (and increment address by 2), pulse a pin
		else if (receivedChar == GBA_FLASH_WRITE_64BYTE_SWAPPED_D0D1 || receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
			PORTB |= (1<<ACTIVITY_LED);
			
			int readLength = 64;
    17ee:	64 cd       	rjmp	.-1336   	; 0x12b8 <main+0x98a>

000017f0 <strtol>:
    17f0:	3f 92       	push	r3
    17f2:	4f 92       	push	r4
    17f4:	5f 92       	push	r5
			if (receivedChar == GBA_FLASH_WRITE_256BYTE_SWAPPED_D0D1) {
				readLength = 256;
			}
			usart_read_bytes(readLength);
    17f6:	6f 92       	push	r6
    17f8:	7f 92       	push	r7
    17fa:	8f 92       	push	r8
    17fc:	9f 92       	push	r9
    17fe:	af 92       	push	r10
    1800:	bf 92       	push	r11
    1802:	cf 92       	push	r12
    1804:	df 92       	push	r13
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	5c 01       	movw	r10, r24
    1814:	6b 01       	movw	r12, r22
    1816:	7a 01       	movw	r14, r20
    1818:	61 15       	cp	r22, r1
    181a:	71 05       	cpc	r23, r1
    181c:	19 f0       	breq	.+6      	; 0x1824 <strtol+0x34>
    181e:	fb 01       	movw	r30, r22
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	80 83       	st	Z, r24
    1824:	e1 14       	cp	r14, r1
    1826:	f1 04       	cpc	r15, r1
    1828:	29 f0       	breq	.+10     	; 0x1834 <strtol+0x44>
    182a:	c7 01       	movw	r24, r14
    182c:	02 97       	sbiw	r24, 0x02	; 2
    182e:	83 97       	sbiw	r24, 0x23	; 35
    1830:	08 f0       	brcs	.+2      	; 0x1834 <strtol+0x44>
    1832:	e2 c0       	rjmp	.+452    	; 0x19f8 <strtol+0x208>
    1834:	e5 01       	movw	r28, r10
    1836:	21 96       	adiw	r28, 0x01	; 1
    1838:	f5 01       	movw	r30, r10
    183a:	10 81       	ld	r17, Z
    183c:	81 2f       	mov	r24, r17
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	1f d1       	rcall	.+574    	; 0x1a80 <isspace>
    1842:	89 2b       	or	r24, r25
    1844:	11 f0       	breq	.+4      	; 0x184a <strtol+0x5a>
    1846:	5e 01       	movw	r10, r28
    1848:	f5 cf       	rjmp	.-22     	; 0x1834 <strtol+0x44>
    184a:	1d 32       	cpi	r17, 0x2D	; 45
    184c:	29 f4       	brne	.+10     	; 0x1858 <strtol+0x68>
    184e:	21 96       	adiw	r28, 0x01	; 1
    1850:	f5 01       	movw	r30, r10
    1852:	11 81       	ldd	r17, Z+1	; 0x01
    1854:	01 e0       	ldi	r16, 0x01	; 1
    1856:	07 c0       	rjmp	.+14     	; 0x1866 <strtol+0x76>
    1858:	1b 32       	cpi	r17, 0x2B	; 43
    185a:	21 f4       	brne	.+8      	; 0x1864 <strtol+0x74>
    185c:	e5 01       	movw	r28, r10
    185e:	22 96       	adiw	r28, 0x02	; 2
    1860:	f5 01       	movw	r30, r10
    1862:	11 81       	ldd	r17, Z+1	; 0x01
    1864:	00 e0       	ldi	r16, 0x00	; 0
    1866:	e1 14       	cp	r14, r1
    1868:	f1 04       	cpc	r15, r1
    186a:	09 f1       	breq	.+66     	; 0x18ae <strtol+0xbe>
    186c:	f0 e1       	ldi	r31, 0x10	; 16
    186e:	ef 16       	cp	r14, r31
    1870:	f1 04       	cpc	r15, r1
    1872:	29 f4       	brne	.+10     	; 0x187e <strtol+0x8e>
    1874:	3e c0       	rjmp	.+124    	; 0x18f2 <strtol+0x102>
    1876:	10 e3       	ldi	r17, 0x30	; 48
    1878:	e1 14       	cp	r14, r1
    187a:	f1 04       	cpc	r15, r1
    187c:	21 f1       	breq	.+72     	; 0x18c6 <strtol+0xd6>
    187e:	28 e0       	ldi	r18, 0x08	; 8
    1880:	e2 16       	cp	r14, r18
    1882:	f1 04       	cpc	r15, r1
    1884:	01 f1       	breq	.+64     	; 0x18c6 <strtol+0xd6>
    1886:	54 f4       	brge	.+20     	; 0x189c <strtol+0xac>
    1888:	e2 e0       	ldi	r30, 0x02	; 2
    188a:	ee 16       	cp	r14, r30
    188c:	f1 04       	cpc	r15, r1
    188e:	21 f5       	brne	.+72     	; 0x18d8 <strtol+0xe8>
    1890:	81 2c       	mov	r8, r1
    1892:	91 2c       	mov	r9, r1
    1894:	a1 2c       	mov	r10, r1
    1896:	b0 e4       	ldi	r27, 0x40	; 64
    1898:	bb 2e       	mov	r11, r27
    189a:	3d c0       	rjmp	.+122    	; 0x1916 <strtol+0x126>
    189c:	fa e0       	ldi	r31, 0x0A	; 10
    189e:	ef 16       	cp	r14, r31
    18a0:	f1 04       	cpc	r15, r1
    18a2:	39 f0       	breq	.+14     	; 0x18b2 <strtol+0xc2>
    18a4:	20 e1       	ldi	r18, 0x10	; 16
    18a6:	e2 16       	cp	r14, r18
    18a8:	f1 04       	cpc	r15, r1
    18aa:	b1 f4       	brne	.+44     	; 0x18d8 <strtol+0xe8>
    18ac:	2f c0       	rjmp	.+94     	; 0x190c <strtol+0x11c>
    18ae:	10 33       	cpi	r17, 0x30	; 48
    18b0:	11 f1       	breq	.+68     	; 0x18f6 <strtol+0x106>
    18b2:	fa e0       	ldi	r31, 0x0A	; 10
    18b4:	ef 2e       	mov	r14, r31
    18b6:	f1 2c       	mov	r15, r1
    18b8:	ac ec       	ldi	r26, 0xCC	; 204
    18ba:	8a 2e       	mov	r8, r26
    18bc:	98 2c       	mov	r9, r8
    18be:	a8 2c       	mov	r10, r8
    18c0:	ac e0       	ldi	r26, 0x0C	; 12
    18c2:	ba 2e       	mov	r11, r26
    18c4:	28 c0       	rjmp	.+80     	; 0x1916 <strtol+0x126>
    18c6:	78 e0       	ldi	r23, 0x08	; 8
    18c8:	e7 2e       	mov	r14, r23
    18ca:	f1 2c       	mov	r15, r1
    18cc:	81 2c       	mov	r8, r1
    18ce:	91 2c       	mov	r9, r1
    18d0:	a1 2c       	mov	r10, r1
    18d2:	e0 e1       	ldi	r30, 0x10	; 16
    18d4:	be 2e       	mov	r11, r30
    18d6:	1f c0       	rjmp	.+62     	; 0x1916 <strtol+0x126>
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e8       	ldi	r25, 0x80	; 128
    18e0:	97 01       	movw	r18, r14
    18e2:	0f 2c       	mov	r0, r15
    18e4:	00 0c       	add	r0, r0
    18e6:	44 0b       	sbc	r20, r20
    18e8:	55 0b       	sbc	r21, r21
    18ea:	ec d0       	rcall	.+472    	; 0x1ac4 <__udivmodsi4>
    18ec:	49 01       	movw	r8, r18
    18ee:	5a 01       	movw	r10, r20
    18f0:	12 c0       	rjmp	.+36     	; 0x1916 <strtol+0x126>
    18f2:	10 33       	cpi	r17, 0x30	; 48
    18f4:	59 f4       	brne	.+22     	; 0x190c <strtol+0x11c>
    18f6:	88 81       	ld	r24, Y
    18f8:	8f 7d       	andi	r24, 0xDF	; 223
    18fa:	88 35       	cpi	r24, 0x58	; 88
    18fc:	09 f0       	breq	.+2      	; 0x1900 <strtol+0x110>
    18fe:	bb cf       	rjmp	.-138    	; 0x1876 <strtol+0x86>
    1900:	19 81       	ldd	r17, Y+1	; 0x01
    1902:	22 96       	adiw	r28, 0x02	; 2
    1904:	02 60       	ori	r16, 0x02	; 2
    1906:	80 e1       	ldi	r24, 0x10	; 16
    1908:	e8 2e       	mov	r14, r24
    190a:	f1 2c       	mov	r15, r1
    190c:	81 2c       	mov	r8, r1
    190e:	91 2c       	mov	r9, r1
    1910:	a1 2c       	mov	r10, r1
    1912:	68 e0       	ldi	r22, 0x08	; 8
    1914:	b6 2e       	mov	r11, r22
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	cb 01       	movw	r24, r22
    191e:	27 01       	movw	r4, r14
    1920:	0f 2c       	mov	r0, r15
    1922:	00 0c       	add	r0, r0
    1924:	66 08       	sbc	r6, r6
    1926:	77 08       	sbc	r7, r7
    1928:	fe 01       	movw	r30, r28
    192a:	50 ed       	ldi	r21, 0xD0	; 208
    192c:	35 2e       	mov	r3, r21
    192e:	31 0e       	add	r3, r17
    1930:	29 e0       	ldi	r18, 0x09	; 9
    1932:	23 15       	cp	r18, r3
    1934:	70 f4       	brcc	.+28     	; 0x1952 <strtol+0x162>
    1936:	2f eb       	ldi	r18, 0xBF	; 191
    1938:	21 0f       	add	r18, r17
    193a:	2a 31       	cpi	r18, 0x1A	; 26
    193c:	18 f4       	brcc	.+6      	; 0x1944 <strtol+0x154>
    193e:	39 ec       	ldi	r19, 0xC9	; 201
    1940:	33 2e       	mov	r3, r19
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <strtol+0x160>
    1944:	2f e9       	ldi	r18, 0x9F	; 159
    1946:	21 0f       	add	r18, r17
    1948:	2a 31       	cpi	r18, 0x1A	; 26
    194a:	10 f5       	brcc	.+68     	; 0x1990 <strtol+0x1a0>
    194c:	29 ea       	ldi	r18, 0xA9	; 169
    194e:	32 2e       	mov	r3, r18
    1950:	31 0e       	add	r3, r17
    1952:	23 2d       	mov	r18, r3
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	2e 15       	cp	r18, r14
    1958:	3f 05       	cpc	r19, r15
    195a:	d4 f4       	brge	.+52     	; 0x1990 <strtol+0x1a0>
    195c:	47 fd       	sbrc	r20, 7
    195e:	15 c0       	rjmp	.+42     	; 0x198a <strtol+0x19a>
    1960:	86 16       	cp	r8, r22
    1962:	97 06       	cpc	r9, r23
    1964:	a8 06       	cpc	r10, r24
    1966:	b9 06       	cpc	r11, r25
    1968:	68 f0       	brcs	.+26     	; 0x1984 <strtol+0x194>
    196a:	a3 01       	movw	r20, r6
    196c:	92 01       	movw	r18, r4
    196e:	9b d0       	rcall	.+310    	; 0x1aa6 <__mulsi3>
    1970:	63 0d       	add	r22, r3
    1972:	71 1d       	adc	r23, r1
    1974:	81 1d       	adc	r24, r1
    1976:	91 1d       	adc	r25, r1
    1978:	61 30       	cpi	r22, 0x01	; 1
    197a:	71 05       	cpc	r23, r1
    197c:	81 05       	cpc	r24, r1
    197e:	20 e8       	ldi	r18, 0x80	; 128
    1980:	92 07       	cpc	r25, r18
    1982:	10 f0       	brcs	.+4      	; 0x1988 <strtol+0x198>
    1984:	4f ef       	ldi	r20, 0xFF	; 255
    1986:	01 c0       	rjmp	.+2      	; 0x198a <strtol+0x19a>
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	21 96       	adiw	r28, 0x01	; 1
    198c:	10 81       	ld	r17, Z
    198e:	cc cf       	rjmp	.-104    	; 0x1928 <strtol+0x138>
    1990:	20 2f       	mov	r18, r16
    1992:	21 70       	andi	r18, 0x01	; 1
    1994:	c1 14       	cp	r12, r1
    1996:	d1 04       	cpc	r13, r1
    1998:	71 f0       	breq	.+28     	; 0x19b6 <strtol+0x1c6>
    199a:	44 23       	and	r20, r20
    199c:	29 f0       	breq	.+10     	; 0x19a8 <strtol+0x1b8>
    199e:	21 97       	sbiw	r28, 0x01	; 1
    19a0:	f6 01       	movw	r30, r12
    19a2:	d1 83       	std	Z+1, r29	; 0x01
    19a4:	c0 83       	st	Z, r28
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <strtol+0x1c6>
    19a8:	01 ff       	sbrs	r16, 1
    19aa:	19 c0       	rjmp	.+50     	; 0x19de <strtol+0x1ee>
    19ac:	22 97       	sbiw	r28, 0x02	; 2
    19ae:	f6 01       	movw	r30, r12
    19b0:	d1 83       	std	Z+1, r29	; 0x01
    19b2:	c0 83       	st	Z, r28
    19b4:	14 c0       	rjmp	.+40     	; 0x19de <strtol+0x1ee>
    19b6:	47 ff       	sbrs	r20, 7
    19b8:	12 c0       	rjmp	.+36     	; 0x19de <strtol+0x1ee>
    19ba:	22 23       	and	r18, r18
    19bc:	29 f0       	breq	.+10     	; 0x19c8 <strtol+0x1d8>
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e8       	ldi	r25, 0x80	; 128
    19c6:	04 c0       	rjmp	.+8      	; 0x19d0 <strtol+0x1e0>
    19c8:	6f ef       	ldi	r22, 0xFF	; 255
    19ca:	7f ef       	ldi	r23, 0xFF	; 255
    19cc:	8f ef       	ldi	r24, 0xFF	; 255
    19ce:	9f e7       	ldi	r25, 0x7F	; 127
    19d0:	22 e2       	ldi	r18, 0x22	; 34
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	30 93 1d 03 	sts	0x031D, r19	; 0x80031d <errno+0x1>
    19d8:	20 93 1c 03 	sts	0x031C, r18	; 0x80031c <errno>
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <strtol+0x200>
    19de:	22 23       	and	r18, r18
    19e0:	81 f0       	breq	.+32     	; 0x1a02 <strtol+0x212>
    19e2:	90 95       	com	r25
    19e4:	80 95       	com	r24
    19e6:	70 95       	com	r23
    19e8:	61 95       	neg	r22
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	8f 4f       	sbci	r24, 0xFF	; 255
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	46 2f       	mov	r20, r22
    19f2:	37 2f       	mov	r19, r23
    19f4:	28 2f       	mov	r18, r24
    19f6:	12 c0       	rjmp	.+36     	; 0x1a1c <strtol+0x22c>
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0d c0       	rjmp	.+26     	; 0x1a1c <strtol+0x22c>
    1a02:	97 ff       	sbrs	r25, 7
    1a04:	f5 cf       	rjmp	.-22     	; 0x19f0 <strtol+0x200>
    1a06:	82 e2       	ldi	r24, 0x22	; 34
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <errno+0x1>
    1a0e:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <errno>
    1a12:	6f ef       	ldi	r22, 0xFF	; 255
    1a14:	7f ef       	ldi	r23, 0xFF	; 255
    1a16:	8f ef       	ldi	r24, 0xFF	; 255
    1a18:	9f e7       	ldi	r25, 0x7F	; 127
    1a1a:	ea cf       	rjmp	.-44     	; 0x19f0 <strtol+0x200>
    1a1c:	64 2f       	mov	r22, r20
    1a1e:	73 2f       	mov	r23, r19
    1a20:	82 2f       	mov	r24, r18
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	bf 90       	pop	r11
    1a34:	af 90       	pop	r10
    1a36:	9f 90       	pop	r9
    1a38:	8f 90       	pop	r8
    1a3a:	7f 90       	pop	r7
    1a3c:	6f 90       	pop	r6
    1a3e:	5f 90       	pop	r5
    1a40:	4f 90       	pop	r4
    1a42:	3f 90       	pop	r3
    1a44:	08 95       	ret

00001a46 <atoi>:
    1a46:	fc 01       	movw	r30, r24
    1a48:	88 27       	eor	r24, r24
    1a4a:	99 27       	eor	r25, r25
    1a4c:	e8 94       	clt
    1a4e:	21 91       	ld	r18, Z+
    1a50:	20 32       	cpi	r18, 0x20	; 32
    1a52:	e9 f3       	breq	.-6      	; 0x1a4e <atoi+0x8>
    1a54:	29 30       	cpi	r18, 0x09	; 9
    1a56:	10 f0       	brcs	.+4      	; 0x1a5c <atoi+0x16>
    1a58:	2e 30       	cpi	r18, 0x0E	; 14
    1a5a:	c8 f3       	brcs	.-14     	; 0x1a4e <atoi+0x8>
    1a5c:	2b 32       	cpi	r18, 0x2B	; 43
    1a5e:	39 f0       	breq	.+14     	; 0x1a6e <atoi+0x28>
    1a60:	2d 32       	cpi	r18, 0x2D	; 45
    1a62:	31 f4       	brne	.+12     	; 0x1a70 <atoi+0x2a>
    1a64:	68 94       	set
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <atoi+0x28>
    1a68:	13 d0       	rcall	.+38     	; 0x1a90 <__mulhi_const_10>
    1a6a:	82 0f       	add	r24, r18
    1a6c:	91 1d       	adc	r25, r1
    1a6e:	21 91       	ld	r18, Z+
    1a70:	20 53       	subi	r18, 0x30	; 48
    1a72:	2a 30       	cpi	r18, 0x0A	; 10
    1a74:	c8 f3       	brcs	.-14     	; 0x1a68 <atoi+0x22>
    1a76:	1e f4       	brtc	.+6      	; 0x1a7e <atoi+0x38>
    1a78:	90 95       	com	r25
    1a7a:	81 95       	neg	r24
    1a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7e:	08 95       	ret

00001a80 <isspace>:
    1a80:	91 11       	cpse	r25, r1
    1a82:	0e c0       	rjmp	.+28     	; 0x1aa0 <__ctype_isfalse>
    1a84:	80 32       	cpi	r24, 0x20	; 32
    1a86:	19 f0       	breq	.+6      	; 0x1a8e <isspace+0xe>
    1a88:	89 50       	subi	r24, 0x09	; 9
    1a8a:	85 50       	subi	r24, 0x05	; 5
    1a8c:	d0 f7       	brcc	.-12     	; 0x1a82 <isspace+0x2>
    1a8e:	08 95       	ret

00001a90 <__mulhi_const_10>:
    1a90:	7a e0       	ldi	r23, 0x0A	; 10
    1a92:	97 9f       	mul	r25, r23
    1a94:	90 2d       	mov	r25, r0
    1a96:	87 9f       	mul	r24, r23
    1a98:	80 2d       	mov	r24, r0
    1a9a:	91 0d       	add	r25, r1
    1a9c:	11 24       	eor	r1, r1
    1a9e:	08 95       	ret

00001aa0 <__ctype_isfalse>:
    1aa0:	99 27       	eor	r25, r25
    1aa2:	88 27       	eor	r24, r24

00001aa4 <__ctype_istrue>:
    1aa4:	08 95       	ret

00001aa6 <__mulsi3>:
    1aa6:	db 01       	movw	r26, r22
    1aa8:	8f 93       	push	r24
    1aaa:	9f 93       	push	r25
    1aac:	2d d0       	rcall	.+90     	; 0x1b08 <__muluhisi3>
    1aae:	bf 91       	pop	r27
    1ab0:	af 91       	pop	r26
    1ab2:	a2 9f       	mul	r26, r18
    1ab4:	80 0d       	add	r24, r0
    1ab6:	91 1d       	adc	r25, r1
    1ab8:	a3 9f       	mul	r26, r19
    1aba:	90 0d       	add	r25, r0
    1abc:	b2 9f       	mul	r27, r18
    1abe:	90 0d       	add	r25, r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	08 95       	ret

00001ac4 <__udivmodsi4>:
    1ac4:	a1 e2       	ldi	r26, 0x21	; 33
    1ac6:	1a 2e       	mov	r1, r26
    1ac8:	aa 1b       	sub	r26, r26
    1aca:	bb 1b       	sub	r27, r27
    1acc:	fd 01       	movw	r30, r26
    1ace:	0d c0       	rjmp	.+26     	; 0x1aea <__udivmodsi4_ep>

00001ad0 <__udivmodsi4_loop>:
    1ad0:	aa 1f       	adc	r26, r26
    1ad2:	bb 1f       	adc	r27, r27
    1ad4:	ee 1f       	adc	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	a2 17       	cp	r26, r18
    1ada:	b3 07       	cpc	r27, r19
    1adc:	e4 07       	cpc	r30, r20
    1ade:	f5 07       	cpc	r31, r21
    1ae0:	20 f0       	brcs	.+8      	; 0x1aea <__udivmodsi4_ep>
    1ae2:	a2 1b       	sub	r26, r18
    1ae4:	b3 0b       	sbc	r27, r19
    1ae6:	e4 0b       	sbc	r30, r20
    1ae8:	f5 0b       	sbc	r31, r21

00001aea <__udivmodsi4_ep>:
    1aea:	66 1f       	adc	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	88 1f       	adc	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	1a 94       	dec	r1
    1af4:	69 f7       	brne	.-38     	; 0x1ad0 <__udivmodsi4_loop>
    1af6:	60 95       	com	r22
    1af8:	70 95       	com	r23
    1afa:	80 95       	com	r24
    1afc:	90 95       	com	r25
    1afe:	9b 01       	movw	r18, r22
    1b00:	ac 01       	movw	r20, r24
    1b02:	bd 01       	movw	r22, r26
    1b04:	cf 01       	movw	r24, r30
    1b06:	08 95       	ret

00001b08 <__muluhisi3>:
    1b08:	09 d0       	rcall	.+18     	; 0x1b1c <__umulhisi3>
    1b0a:	a5 9f       	mul	r26, r21
    1b0c:	90 0d       	add	r25, r0
    1b0e:	b4 9f       	mul	r27, r20
    1b10:	90 0d       	add	r25, r0
    1b12:	a4 9f       	mul	r26, r20
    1b14:	80 0d       	add	r24, r0
    1b16:	91 1d       	adc	r25, r1
    1b18:	11 24       	eor	r1, r1
    1b1a:	08 95       	ret

00001b1c <__umulhisi3>:
    1b1c:	a2 9f       	mul	r26, r18
    1b1e:	b0 01       	movw	r22, r0
    1b20:	b3 9f       	mul	r27, r19
    1b22:	c0 01       	movw	r24, r0
    1b24:	a3 9f       	mul	r26, r19
    1b26:	70 0d       	add	r23, r0
    1b28:	81 1d       	adc	r24, r1
    1b2a:	11 24       	eor	r1, r1
    1b2c:	91 1d       	adc	r25, r1
    1b2e:	b2 9f       	mul	r27, r18
    1b30:	70 0d       	add	r23, r0
    1b32:	81 1d       	adc	r24, r1
    1b34:	11 24       	eor	r1, r1
    1b36:	91 1d       	adc	r25, r1
    1b38:	08 95       	ret

00001b3a <_exit>:
    1b3a:	f8 94       	cli

00001b3c <__stop_program>:
    1b3c:	ff cf       	rjmp	.-2      	; 0x1b3c <__stop_program>
